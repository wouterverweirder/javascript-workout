{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/isomorphic-fetch/fetch-npm-browserify.js","node_modules/whatwg-fetch/dist/fetch.umd.js","src/mobile/js/classes/Presentation.js","src/mobile/js/script.js","src/shared/js/Constants.js","src/shared/js/classes/ContentBase.js","src/shared/js/classes/MobileServerBridge.js","src/shared/js/classes/Presentation.js","src/shared/js/classes/SlideBridge.js","src/mobile/js/classes/react-phones-slide/index.js","src/mobile/js/classes/shake-your-phones-slide/index.js"],"names":[],"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","file":"script.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.WHATWGFetch = {})));\n}(this, (function (exports) { 'use strict';\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import {Constants} from '../../../shared/js/Constants';\nimport PresentationBase from '../../../shared/js/classes/Presentation';\nimport MobileServerBridge from '../../../shared/js/classes/MobileServerBridge';\n\nexport default class Presentation extends PresentationBase{\n\n  constructor(data, role, settings) {\n    super(data, role, settings);\n    this.$overlay = $(`#overlay`);\n  }\n\n  createMobileServerBridge() {\n    return new MobileServerBridge(this, this.settings);\n  }\n\n  handleMobileServerMessage(message) {\n    if(!message.content) {\n      return;\n    }\n    if(message.content.action === `setCurrentSlideIndex`) {\n      this.setCurrentSlideIndex(message.content.currentSlideIndex);\n    } else if(message.content.action === Constants.BLINK) {\n      this.blink(message.content.text, message.content.backgroundColor);\n    }\n  }\n\n  setCurrentSlideIndex(index) {\n    super.setCurrentSlideIndex(index);\n    if(this.$overlay) {\n      this.$overlay.removeClass(`active`);\n    }\n    if(this.blinkInterval) {\n      clearInterval(this.blinkInterval);\n    }\n  }\n\n  blink(text, backgroundColor) {\n    //overlay important, blinking text\n    this.$overlay.find(`.content`).html(text);\n    this.$overlay.addClass(`active`);\n    if(this.blinkInterval) {\n      clearInterval(this.blinkInterval);\n    }\n    this.blinkInterval = setInterval(this.blinkToggle.bind(this, backgroundColor), 500);\n  }\n\n  blinkToggle(backgroundColor) {\n    this.$overlay.toggleClass(`blink-on`);\n    if(this.$overlay.hasClass(`blink-on`)) {\n      this.$overlay.css(`background-color`, backgroundColor);\n    } else {\n      this.$overlay.css(`background-color`, ``);\n    }\n  }\n\n}\n","import Presentation from './classes/Presentation';\nimport fetch from 'isomorphic-fetch';\n\n(() => {\n\n  const init = () => {\n    const settings = {\n      presentationPath: `/`,\n      mobileServerUrl: ``\n    };\n    //get slides by xmlhttprequest\n    fetch(`/data.json?t=${  Date.now()}`)\n      .then(data => data.json())\n      .then(data => {\n        new Presentation(data, `mobile`, settings);\n      });\n  };\n\n  init();\n})();\n","export const Constants = {\n  GO_TO_PREVIOUS_SLIDE: `goToPreviousSlide`,\n  GO_TO_NEXT_SLIDE: `goToNextSlide`,\n  SET_SLIDES: `setSlides`,\n  SET_CURRENT_SLIDE_INDEX: `setCurrentSlideIndex`,\n\n  MESSAGE: `message`,\n  SOCKET_SEND: `socketSend`,\n  SOCKET_RECEIVE: `socketReceive`,\n  JOIN_SLIDE_ROOM: `joinSlideRoom`,\n  LEAVE_SLIDE_ROOM: `leaveSlideRoom`,\n\n  ROLE_PRESENTATION: `presentation`,\n  ROLE_MOBILE: `mobile`,\n\n  STATE_ACTIVE: `active`,\n  STATE_INACTIVE: `inactive`,\n\n  SET_SUBSTATE: `setSubstate`,\n\n  CHILD_APP_SAVE_CODE: `childAppSaveCode`,\n  CHILD_APP_RUN_CODE: `childAppRunCode`,\n  CHILD_APP_STDOUT_DATA: `childAppStdoutData`,\n  CHILD_APP_STDERR_DATA: `childAppStderrData`,\n\n  OPEN_COMMAND_LINE: `openCommandLine`,\n  OPEN_CAMERA: `openCamera`,\n\n  BLINK: `blink`,\n\n  HEART_RATE_POLAR: `heartRatePolar`,\n\n  SET_TEAM: `setTeam`,\n  UPDATE_MOTION: `updateMotion`,\n\n  YOU_WIN: `youWin`,\n  YOU_LOSE: `youLose`,\n\n  SHAKE_YOUR_PHONES_INTRO: `shakeYourPhonesIntro`,\n  SHAKE_YOUR_PHONES_GAME: `shakeYourPhonesGame`,\n  SHAKE_YOUR_PHONES_FINISHED: `shakeYourPhonesFinished`,\n\n  SHAKE_YOUR_PHONES_CLIENT_ADDED: `shakeYourPhonesClientAdded`,\n  SHAKE_YOUR_PHONES_CLIENT_REMOVED: `shakeYourPhonesClientRemoved`,\n  SHAKE_YOUR_PHONES_CLIENT_LIST: `shakeYourPhonesClientList`,\n  SHAKE_YOUR_PHONES_CLIENT_UPDATE: `shakeYourPhonesClientUpdate`,\n\n  HIGHEST_HEARTRATE_GAME_INTRO: `highestHeartrateGameIntro`,\n  HIGHEST_HEARTRATE_GAME_GAME: `highestHeartrateGameGame`,\n  HIGHEST_HEARTRATE_GAME_FINISHED: `highestHeartrateGameFinished`,\n\n  LOWEST_HEARTRATE_GAME_INTRO: `lowestHeartrateGameIntro`,\n  LOWEST_HEARTRATE_GAME_GAME: `lowestHeartrateGameGame`,\n  LOWEST_HEARTRATE_GAME_FINISHED: `lowestHeartrateGameFinished`,\n\n  UPDATE_REACTION_SPEED: `updateReactionSpeed`,\n\n  REACT_PHONES_INTRO: `reactPhonesIntro`,\n  REACT_PHONES_GAME: `reactPhonesGame`,\n  REACT_PHONES_FINISHED: `reactPhonesFinished`,\n\n  DANCE_PAD_GAME_INTRO: `dancePadGameIntro`,\n  DANCE_PAD_GAME_GAME: `dancePadGameGame`,\n  DANCE_PAD_GAME_FINISHED: `dancePadGameFinished`,\n};\n","import {Constants} from '../Constants';\n\nexport default class ContentBase{\n\n  constructor($slideHolder) {\n    this.$slideHolder = $slideHolder;\n    this.slideHolder = this.$slideHolder[0];\n    this.width = this.slideHolder.offsetWidth;\n    this.height = this.slideHolder.offsetHeight;\n    this.prevWidth = this.width;\n    this.prevHeight = this.height;\n    this.widthChanged = false;\n    this.heightChanged = false;\n    this.sizeChanged = false;\n    this.src = $slideHolder.attr(`data-src`);\n    this.name = $slideHolder.attr(`data-name`);\n    this.settings = {};\n    try {\n      this.settings = JSON.parse($(`#presentation`).attr(`data-presentation-settings`));\n    } catch (e) {\n      console.error(e);\n    }\n    this.fps = 60;\n    this._animationFrameId = false;\n    this._currentTime = 0;\n    this._delta = 0;\n    this._interval = false;\n    this._lastTime = new Date().getTime();\n    this.currentFrame = 0;\n\n    this.startListeningForMessages();\n\n    this.__drawLoop = this._drawLoop.bind(this);\n    this._interval = 1000 / this.fps;\n\n    window.requestAnimationFrame(() => {\n      $slideHolder.trigger(`load`);\n    });\n  }\n\n  startListeningForMessages() {\n    this._slideHolderMessageToSlideHandler = this.slideHolderMessageToSlideHandler.bind(this);\n    this.$slideHolder.on(`message-to-slide`, this._slideHolderMessageToSlideHandler);\n  }\n\n  stopListeningForMessages() {\n    this.$slideHolder.off(`message-to-slide`, this._slideHolderMessageToSlideHandler);\n  }\n\n  slideHolderMessageToSlideHandler(event, message) {\n    this.receiveMessage({data: message});\n  }\n\n  receiveMessage(event) {\n    if(!event.data) {\n      return;\n    }\n    switch(event.data.action) {\n    case `setState`:\n      this.setState(event.data.state);\n      break;\n    case `destroy`:\n      this.destroy();\n      break;\n    case Constants.SOCKET_RECEIVE:\n      this.receiveSocketMessage(event.data.message);\n      break;\n    default:\n      this.handleMessage(event.data);\n      break;\n    }\n  }\n\n  destroy() {\n    this.stopListeningForMessages();\n    window.cancelAnimationFrame(this._animationFrameId);\n  }\n\n  postMessage(data) {\n    this.$slideHolder.trigger(`message-from-slide`, data);\n  }\n\n  handleMessage(data) { // eslint-disable-line no-unused-vars\n  }\n\n  postSocketMessage(message) {\n    this.postMessage({\n      action: Constants.SOCKET_SEND,\n      message: message\n    });\n  }\n\n  receiveSocketMessage(message) { // eslint-disable-line no-unused-vars\n  }\n\n  setState(state) {\n    if(state !== this.state) {\n      this.state = state;\n      this.onStateChanged();\n      if(this.state === Constants.STATE_ACTIVE) {\n        this.currentFrame = 0;\n        this._drawLoop();\n      } else {\n        window.cancelAnimationFrame(this._animationFrameId);\n      }\n    }\n  }\n\n  onStateChanged() {\n  }\n\n  _drawLoop() {\n    this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);\n    this._currentTime = (new Date()).getTime();\n    this._delta = (this._currentTime - this._lastTime);\n    if(this._delta > this._interval) {\n      this.currentFrame++;\n      this.prevWidth = this.width;\n      this.prevHeight = this.height;\n      this.width = this.slideHolder.offsetWidth;\n      this.height = this.slideHolder.offsetHeight;\n      this.widthChanged = (this.width !== this.prevWidth);\n      this.heightChanged = (this.height !== this.prevHeight);\n      this.sizeChanged = (this.widthChanged || this.heightChanged);\n      this.drawLoop(this._delta);\n      this._lastTime = this._currentTime - (this._delta % this._interval);\n    }\n  }\n\n  drawLoop(delta) { // eslint-disable-line no-unused-vars\n  }\n\n}\n","import fetch from 'isomorphic-fetch';\n\nexport default class MobileServerBridge {\n\n  constructor(presentation, settings) {\n    this.presentation = presentation;\n    this.settings = settings;\n    this.connect();\n  }\n\n  connect() {\n    console.log(`MobileServerBridge.connect`);\n    //console.warn('MobileServerBridge disabled');\n    //return;\n    //post to the api\n    fetch(`${this.settings.mobileServerUrl}/login`, {\n      method: `POST`,\n      body: JSON.stringify(this.getLoginCredentials()),\n      headers: new Headers({'Content-Type': `application/json`})\n    })\n    .then(response => response.json())\n    .then(result => this.loginHandler(result))\n    .catch(e => {\n      console.error(e);\n      setTimeout(() => this.connect(), 1000);\n    });\n  }\n\n  getLoginCredentials() {\n    return {\n      email: this.settings.mobileServerUsername,\n      password: this.settings.mobileServerPassword,\n    };\n  }\n\n  loginHandler(result) {\n    this.token = result.token;\n    this.socket = io(this.settings.mobileServerUrl, {\n      query: `token=${  this.token}`,\n      reconnection: false,\n      forceNew: true\n    });\n    this.socket.on(`connect`, this.socketConnectHandler.bind(this));\n    this.socket.on(`disconnect`, this.socketDisconnectHandler.bind(this));\n    this.socket.on(`message`, this.socketMessageHandler.bind(this));\n  }\n\n  socketConnectHandler() {\n    console.log(`MobileServerBridge.socketConnectHandler`);\n    this.presentation.mobileServerBridgeConnected();\n  }\n\n  socketDisconnectHandler() {\n    this.connect();\n  }\n\n  tryToSend() {\n    if(this.socket) {\n      this.socket.emit.apply(this.socket, arguments);\n    }\n  }\n\n  socketMessageHandler(message) {\n    this.presentation.mobileServerMessageHandler(message);\n  }\n}\n","import {Constants} from '../Constants';\nimport SlideBridge from './SlideBridge';\n\nexport default class Presentation {\n  /*\n   * data: json object with slides array property\n   * role: mobile or presentation\n   */\n  constructor(data, role, settings) {\n    this.data = data;\n    this.role = role;\n    this.settings = settings;\n    $(`#presentation`).attr(`data-presentation-settings`, JSON.stringify(settings));\n    this.currentSlideIndex = -1;\n    this.slideHolders = [];\n    this.numSlideHolders = 3;\n    this.slideBridges = [];\n    this.slideBridgesBySlideName = {};\n\n    this.createSlideHolders();\n    this.createSlideBridges(this.data);\n\n    this.mobileServerBridge = this.createMobileServerBridge();\n    this.startListeningForMessages();\n\n    this.setCurrentSlideIndex(0);\n  }\n\n  startListeningForMessages() {\n    window.addEventListener(`message`, this.slideMessageHandler.bind(this), false);\n  }\n\n  createSlideHolders() {\n    for(let i = 0; i < this.numSlideHolders; i++) {\n      const $slideHolder = $(`<div class=\"slide-frame\" />`);\n      this.slideHolders.push($slideHolder);\n      $(`#presentation`).append($slideHolder);\n    }\n  }\n\n  createSlideBridges(data) {\n    const numSlides = data.slides.length;\n    for(let i = 0; i < numSlides; i++) {\n      const slideBridge = this.createSlideBridge(data.slides[i]);\n      this.slideBridges.push(slideBridge);\n      this.slideBridgesBySlideName[slideBridge.name] = slideBridge;\n    }\n  }\n\n  createSlideBridge(slide) {\n    return new SlideBridge(slide);\n  }\n\n  slideMessageHandler(event) {\n    if(!event.data) {\n      return;\n    }\n    switch(event.data.action) {\n    case Constants.SOCKET_SEND:\n      if(this.mobileServerBridge) {\n        this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);\n      }\n      break;\n    }\n  }\n\n  mobileServerBridgeConnected() {\n    //join the rooms of the slideHolders\n    for(let i = 0; i < this.numSlideHolders; i++) {\n      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.slideHolders[i]).attr(`data-name`));\n    }\n  }\n\n  mobileServerMessageHandler(message) {\n    if(message.target.slide) {\n      //slide has to handle the message\n      const slideBridge = this.getSlideBridgeByName(message.target.slide);\n      if(slideBridge) {\n        slideBridge.tryToPostMessage({\n          action: Constants.SOCKET_RECEIVE,\n          message: message\n        });\n      }\n    } else {\n      //presentation has to handle the message\n      this.handleMobileServerMessage(message);\n    }\n  }\n\n  handleMobileServerMessage(message) {\n    console.log(`[shared/Presentation] handleMobileServerMessage`, message);\n  }\n\n  getSlideBridgeByIndex(index) {\n    if(index >= 0 && index < this.slideBridges.length) {\n      return this.slideBridges[index];\n    }\n    return false;\n  }\n\n  getSlideBridgeByName(slideName) {\n    return this.slideBridgesBySlideName[slideName];\n  }\n\n  getSlideHolderForSlide(slide, slidesNotToClear) {\n    if(slide) {\n      let $slideHolder = $(`.slide-frame[data-name=\"${  slide.name  }\"]`);\n      if($slideHolder.length > 0) {\n        return $slideHolder[0];\n      }\n      //get a free slideHolder\n      const slideNamesNotToClear = [];\n      $(slidesNotToClear).each(function(index, obj){\n        slideNamesNotToClear.push(obj.name);\n      });\n      const $slideHolders = $(`.slide-frame`);\n      for (let i = $slideHolders.length - 1; i >= 0; i--) {\n        $slideHolder = $($slideHolders[i]);\n        const name = $slideHolder.attr(`data-name`);\n        if(!name || slideNamesNotToClear.indexOf(name) === -1) {\n          return $slideHolder[0];\n        }\n      }\n    }\n    return false;\n  }\n\n  goToPreviousSlide() {\n    this.setCurrentSlideIndex(this.currentSlideIndex - 1);\n  }\n\n  goToNextSlide() {\n    this.setCurrentSlideIndex(this.currentSlideIndex + 1);\n  }\n\n  setCurrentSlideIndex(value) {\n    value = Math.max(0, Math.min(value, this.slideBridges.length - 1));\n    if(value !== this.currentSlideIndex) {\n      this.currentSlideIndex = value;\n\n      const currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);\n      const previousSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex - 1);\n      const nextSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex + 1);\n\n      //remove \"used\" class from slide holders\n      $(`.slide-frame`).removeAttr(`data-used`, false);\n\n      const currentSlideHolder = this.getSlideHolderForSlide(currentSlideBridge, [previousSlideBridge, nextSlideBridge]);\n      this.setupSlideHolder(currentSlideHolder, currentSlideBridge, Constants.STATE_ACTIVE, 0);\n\n      const previousSlideHolder = this.getSlideHolderForSlide(previousSlideBridge, [currentSlideBridge, nextSlideBridge]);\n      this.setupSlideHolder(previousSlideHolder, previousSlideBridge, Constants.STATE_INACTIVE, `-100%`);\n\n      const nextSlideHolder = this.getSlideHolderForSlide(nextSlideBridge, [previousSlideBridge, currentSlideBridge]);\n      this.setupSlideHolder(nextSlideHolder, nextSlideBridge, Constants.STATE_INACTIVE, `100%`);\n\n      //clear attributes of unused slide frames\n      $(`.slide-frame`).each(function(index, slideHolder){\n        if(!$(slideHolder).attr(`data-used`)) {\n          $(slideHolder).removeAttr(`data-used`).removeAttr(`data-name`).removeAttr(`data-src`);\n        }\n      });\n\n      //all other slideHolder bridges should be unlinked from their slideHolder\n      this.slideBridges.forEach(function(slideBridge){\n        if(slideBridge === currentSlideBridge) {\n          return;\n        }\n        if(slideBridge === previousSlideBridge) {\n          return;\n        }\n        if(slideBridge === nextSlideBridge) {\n          return;\n        }\n        slideBridge.slideHolder = null;\n      });\n\n      bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);\n    }\n  }\n\n  setupSlideHolder(slideHolder, slideBridge, state, left) {\n    if(slideHolder) {\n      let src = `slides/${  slideBridge.name  }.html`;\n      if(slideBridge.data[this.role] && slideBridge.data[this.role].url) {\n        src = slideBridge.data[this.role].url;\n      }\n      src = this.processSlideSrc(src);\n      if(slideBridge.isAlreadyCorrectlyAttached(slideHolder, src)) {\n        //console.log(slideBridge.name + ' already attached');\n      } else {\n        this.attachToSlideHolder(slideHolder, slideBridge, src);\n      }\n      slideBridge.setState(state);\n      $(slideHolder).css(`left`, left);\n      $(slideHolder).attr(`data-used`, 1);\n    }\n  }\n\n  attachToSlideHolder(slideHolder, slideBridge, src) {\n    //listen for events on this slideHolder\n    $(slideHolder).off(`message-from-slide`);\n    $(slideHolder).on(`message-from-slide`, (event, message) =>  {\n      this.slideMessageHandler({data: message});\n    });\n    //leave previous channel of this slideHolder\n    if(this.mobileServerBridge) {\n      this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(slideHolder).attr(`data-name`));\n    }\n    //add the join as a callback for the onload event\n    slideBridge.attachToSlideHolder(slideHolder, src, this.slideLoaded.bind(this, slideHolder, slideBridge, src));\n  }\n\n  slideLoaded(slideHolder, slideBridge) { // eslint-disable-line no-unused-vars\n    //join new channel\n    if(this.mobileServerBridge) {\n      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(slideHolder).attr(`data-name`));\n    }\n  }\n\n  processSlideSrc(src) {\n    return src;\n  }\n\n  createMobileServerBridge() {\n    //to implement in extending classes\n  }\n}\n","import fetch from 'isomorphic-fetch';\n\nexport default class SlideBridge {\n  constructor(data) {\n    this.data = data;\n    this.name = this.data.name;\n  }\n\n  isAlreadyCorrectlyAttached(slideHolder, src) {\n    return (this.slideHolder === slideHolder && $(slideHolder).attr(`data-name`) === this.name && $(slideHolder).attr(`data-src`) === src);\n  }\n\n  attachToSlideHolder(slideHolder, src, cb) {\n    this.slideHolder = slideHolder;\n    //notify the content it is being cleared\n    this.tryToPostMessage({action: `destroy`});\n    //clear the current content\n    this.slideHolder.innerHTML = ``;\n    $(slideHolder).attr(`data-name`, this.name);\n    $(slideHolder).addClass(`loading`);\n\n    $(slideHolder).off(`load`);\n    $(slideHolder).on(`load`, () => {\n      this.tryToPostMessage({\n        action: `setState`,\n        state: this.state\n      });\n      $(slideHolder).off(`load`);\n    });\n\n    if(src !== $(slideHolder).attr(`data-src`)) {\n      //fetch the html\n      fetch(src)\n        .then(result => result.text())\n        .then(result => $(result))\n        .then($result => {\n          $(slideHolder).html($result.html());\n          $(slideHolder).removeClass(`loading`);\n          cb();\n        })\n        .catch(err => {\n          console.error(err);\n          $(slideHolder).removeClass(`loading`);\n          cb();\n        });\n      $(slideHolder).attr(`data-src`, src);\n    }\n  }\n\n  tryToPostMessage(message) {\n    if(!this.slideHolder)\n    {\n      console.log(`${this.name  } post fail`);\n      return;\n    }\n    //trigger with jquery\n    $(this.slideHolder).trigger(`message-to-slide`, message);\n  }\n\n  setState(state) {\n    this.state = state;\n    this.tryToPostMessage({\n      action: `setState`,\n      state: this.state\n    });\n  }\n}\n","import {Constants} from '../../../../shared/js/Constants';\nimport ContentBase from '../../../../shared/js/classes/ContentBase';\n\nexport default class ReactPhonesSlide extends ContentBase{\n\n  constructor($slideHolder) {\n    super($slideHolder);\n\n    this.totalReactionSpeed = 0;\n    this.numReactionSpeeds = 0;\n    this.numCorrectAnswers = 1;\n    this.averageReactionSpeed = 9999999;\n    this.visiblePosition = 0;\n    this.targetPosition = 0;\n    this.lastAnswerTime = new Date();\n    this.positions = [];\n\n    this.$game = this.$slideHolder.find(`.game`);\n    this.$slidesContainer = this.$slideHolder.find(`.react-phones-slides-container`);\n    this.$slide1 = this.$slideHolder.find(`.react-phones-slide-1`);\n    this.$slide1text = this.$slideHolder.find(`.react-phones-slide-1 .react-phones-slide-text`);\n    this.$slide2 = this.$slideHolder.find(`.react-phones-slide-2`);\n    this.$slide2text = this.$slideHolder.find(`.react-phones-slide-2 .react-phones-slide-text`);\n\n    this.$slideHolder.find(`.touchbutton`).on(`touchstart`, $.proxy(this.onButtonTouchStart, this));\n    this.$slideHolder.find(`.touchbutton`).on(`touchend`, $.proxy(this.onButtonTouchEnd, this));\n\n    this.$slideHolder.find(`.touchbutton`).on(`mousedown`, $.proxy(this.onButtonTouchStart, this));\n    this.$slideHolder.find(`.touchbutton`).on(`mouseup`, $.proxy(this.onButtonTouchEnd, this));\n\n    this.resetGame();\n  }\n\n  onButtonTouchStart(e) {\n    e.preventDefault();\n    $(e.currentTarget).addClass(`down`);\n    this.selectAnswer($(e.currentTarget).text());\n  }\n\n  onButtonTouchEnd(e) {\n    e.preventDefault();\n    $(e.currentTarget).removeClass(`down`);\n  }\n\n  selectAnswer(answer) {\n    const now = new Date();\n    const time = now.getTime() - this.lastAnswerTime.getTime();\n    this.totalReactionSpeed += time;\n    if(answer.toLowerCase() === this.positions[this.targetPosition].colorString.toLowerCase()) {\n\t\t\t//correct answer\n      this.numCorrectAnswers++;\n    } else {\n\t\t\t//penalty time\n      this.totalReactionSpeed += 1000;\n    }\n    this.numReactionSpeeds++;\n    this.lastAnswerTime = now;\n    this.targetPosition++;\n    this.fillPositionsWhenNeeded();\n\t\t//send to server\n    this.postSocketMessage({\n      target: {\n        client: `presentation`,\n        slide: this.name\n      },\n      content: {\n        action: Constants.UPDATE_REACTION_SPEED,\n        reactionSpeed: this.totalReactionSpeed / this.numCorrectAnswers\n      }\n    });\n  }\n\n  showCurrentState() {\n    this.$slideHolder.find(`.substate`).removeClass(`active`);\n    this.$game.css({\n      'z-index': -1,\n      opacity: 0.3,\n      'pointer-events': `none`\n    });\n    if(this.substate === Constants.REACT_PHONES_GAME) {\n      this.$slideHolder.find(`.substate-game`).addClass(`active`);\n      this.$game.css({\n        'z-index': 10,\n        opacity: 1,\n        'pointer-events': `auto`\n      });\n    } else if(this.substate === Constants.REACT_PHONES_FINISHED) {\n      this.$slideHolder.find(`.substate-finished`).addClass(`active`);\n    } else {\n      this.$slideHolder.find(`.substate-intro`).addClass(`active`);\n    }\n  }\n\n  onStateChanged() {\n    if(this.state === Constants.STATE_ACTIVE) {\n      this.resetGame();\n    }\n  }\n\n  resetGame() {\n    this.lastAnswerTime = new Date();\n    this.totalReactionSpeed = 0;\n    this.numReactionSpeeds = 0;\n    this.numCorrectAnswers = 1;\n    this.averageReactionSpeed = 9999999;\n    this.visiblePosition = 0;\n    this.targetPosition = 0;\n    this.positions = [];\n    this.fillPositionsWhenNeeded();\n  }\n\n  fillPositionsWhenNeeded() {\n    const numPositionsToAdd = this.numReactionSpeeds + 2 - this.positions.length;\n    for(let i = 0; i < numPositionsToAdd; i++) {\n      const position = {\n        colorString: (Math.random() > 0.5) ? `red` : `blue`,\n        bgcolor: (Math.random() > 0.5) ? `#c6363d` : `#0684AF`\n      };\n      if(position.colorString === `red`) {\n        position.color = `#c6363d`;\n      } else {\n        position.color = `#0684AF`;\n      }\n      this.positions.push(position);\n    }\n  }\n\n  drawLoop() {\n    this.visiblePosition += (this.targetPosition - this.visiblePosition) * 0.1;\n    if(this.visiblePosition % 1 > 0.995) {\n      this.visiblePosition = Math.round(this.visiblePosition);\n    }\n    this.$slidesContainer.css(`left`, `${this.visiblePosition * -100  }%`);\n\n    const flooredVisiblePosition = Math.floor(this.visiblePosition);\n    if(flooredVisiblePosition % 2 === 0) {\n      this.$slide1.css({\n        left: `${flooredVisiblePosition * 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition].bgcolor\n      });\n      this.$slide2.css({\n        left: `${flooredVisiblePosition * 100 + 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition + 1].bgcolor\n      });\n\n      this.$slide1text.text(this.positions[flooredVisiblePosition].colorString);\n      this.$slide2text.text(this.positions[flooredVisiblePosition + 1].colorString);\n    } else {\n      this.$slide2.css({\n        left: `${flooredVisiblePosition * 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition].bgcolor\n      });\n      this.$slide1.css({\n        left: `${flooredVisiblePosition * 100 + 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition + 1].bgcolor\n      });\n\n      this.$slide2text.text(this.positions[flooredVisiblePosition].colorString);\n      this.$slide1text.text(this.positions[flooredVisiblePosition + 1].colorString);\n    }\n  }\n\n  receiveSocketMessage(message) {\n    if(!message.content) {\n      return;\n    }\n    if(message.content.action === Constants.SET_SUBSTATE) {\n      this.setSubstate(message.content.substate);\n    }\n  }\n\n  setSubstate(substate) {\n    if(this.substate !== substate) {\n      this.substate = substate;\n      this.showCurrentState();\n    }\n  }\n\n}\n","import {Constants} from '../../../../shared/js/Constants';\nimport ContentBase from '../../../../shared/js/classes/ContentBase';\n\nexport default class ShakeYourPhonesSlide extends ContentBase{\n\n  constructor($slideHolder) {\n    super($slideHolder);\n    this.currentMotion = 0;\n    this.motion = 0;\n\n    this.$slideHolder.find(`.slide`).css(`background-color`, `#c6363d`);\n\n    this.$background = this.$slideHolder.find(`.background`);\n    this.$background.css(`top`, `100%`);\n    this.$background.css(`background-color`, `rgba(255, 255, 255, 0.5)`);\n\n    this._motionUpdateHandler = this.motionUpdateHandler.bind(this);\n  }\n\n  onStateChanged() {\n    if(this.state === Constants.STATE_ACTIVE) {\n      if (window.DeviceMotionEvent) {\n        window.addEventListener(`devicemotion`, this._motionUpdateHandler, false);\n      } else {\n        this.$slideHolder.find(`.acceleration`).text(`Not supported on your device :-(`);\n      }\n    } else {\n      window.removeEventListener(`devicemotion`, this._motionUpdateHandler);\n    }\n  }\n\n  receiveSocketMessage(message) {\n    if(!message.content) {\n      return;\n    }\n    if(message.content.action === Constants.SET_SUBSTATE) {\n      this.setSubstate(message.content.substate);\n    }\n    // if(message.content.action === Constants.YOU_WIN) {\n    //   this.$slideHolder.find('.substate-finished h1').text('Your Team Won!');\n    // }\n    // if(message.content.action === Constants.YOU_LOSE) {\n    //   this.$slideHolder.find('.substate-finished h1').text('Your Team Lost...');\n    // }\n  }\n\n  setSubstate(substate) {\n    if(this.substate !== substate) {\n      this.substate = substate;\n      this.showCurrentState();\n    }\n  }\n\n  motionUpdateHandler(event) {\n    this.currentMotion = event.interval * (Math.abs(event.acceleration.x) + Math.abs(event.acceleration.y) + Math.abs(event.acceleration.z));\n  }\n\n  drawLoop() {\n    this.motion += this.currentMotion;\n    this.motion *= 0.97;\n    this.$background.css(`top`, `${100 - this.motion  }%`);\n    if(this.currentFrame % 10 === 0) {\n      this.postSocketMessage({\n        target: {\n          client: `presentation`,\n          slide: this.name\n        },\n        content: {\n          action: Constants.UPDATE_MOTION,\n          motion: this.motion\n        }\n      });\n    }\n  }\n\n  showCurrentState() {\n    this.$slideHolder.find(`.substate`).removeClass(`active`);\n    if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {\n      this.$slideHolder.find(`.substate-game`).addClass(`active`);\n    } else if(this.substate === Constants.SHAKE_YOUR_PHONES_FINISHED) {\n      this.$slideHolder.find(`.substate-finished`).addClass(`active`);\n    } else {\n      this.$slideHolder.find(`.substate-intro`).addClass(`active`);\n    }\n  }\n\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvaXNvbW9ycGhpYy1mZXRjaC9mZXRjaC1ucG0tYnJvd3NlcmlmeS5qcyIsIm5vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZGlzdC9mZXRjaC51bWQuanMiLCJzcmMvbW9iaWxlL2pzL2NsYXNzZXMvUHJlc2VudGF0aW9uLmpzIiwic3JjL21vYmlsZS9qcy9zY3JpcHQuanMiLCJzcmMvc2hhcmVkL2pzL0NvbnN0YW50cy5qcyIsInNyYy9zaGFyZWQvanMvY2xhc3Nlcy9Db250ZW50QmFzZS5qcyIsInNyYy9zaGFyZWQvanMvY2xhc3Nlcy9Nb2JpbGVTZXJ2ZXJCcmlkZ2UuanMiLCJzcmMvc2hhcmVkL2pzL2NsYXNzZXMvUHJlc2VudGF0aW9uLmpzIiwic3JjL3NoYXJlZC9qcy9jbGFzc2VzL1NsaWRlQnJpZGdlLmpzIiwic3JjL21vYmlsZS9qcy9jbGFzc2VzL3JlYWN0LXBob25lcy1zbGlkZS9pbmRleC5qcyIsInNyYy9tb2JpbGUvanMvY2xhc3Nlcy9zaGFrZS15b3VyLXBob25lcy1zbGlkZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFFTixtQkFBTyxLQUFLO0FBRk4sV0FEYTtBQUtyQixtQkFBUztBQUNQLG9CQUFRLHFCQUFVLGFBRFg7QUFFUCxvQkFBUSxLQUFLO0FBRk47QUFMWSxTQUF2QjtBQVVEO0FBQ0Y7Ozt1Q0FFa0I7QUFDakIsV0FBSyxZQUFMLENBQWtCLElBQWxCLGNBQW9DLFdBQXBDO0FBQ0EsVUFBRyxLQUFLLFFBQUwsS0FBa0IscUJBQVUsc0JBQS9CLEVBQXVEO0FBQ3JELGFBQUssWUFBTCxDQUFrQixJQUFsQixtQkFBeUMsUUFBekM7QUFDRCxPQUZELE1BRU8sSUFBRyxLQUFLLFFBQUwsS0FBa0IscUJBQVUsMEJBQS9CLEVBQTJEO0FBQ2hFLGFBQUssWUFBTCxDQUFrQixJQUFsQix1QkFBNkMsUUFBN0M7QUFDRCxPQUZNLE1BRUE7QUFDTCxhQUFLLFlBQUwsQ0FBa0IsSUFBbEIsb0JBQTBDLFFBQTFDO0FBQ0Q7QUFDRjs7OztFQWpGK0MscUI7O2tCQUE3QixvQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vIHRoZSB3aGF0d2ctZmV0Y2ggcG9seWZpbGwgaW5zdGFsbHMgdGhlIGZldGNoKCkgZnVuY3Rpb25cbi8vIG9uIHRoZSBnbG9iYWwgb2JqZWN0ICh3aW5kb3cgb3Igc2VsZilcbi8vXG4vLyBSZXR1cm4gdGhhdCBhcyB0aGUgZXhwb3J0IGZvciB1c2UgaW4gV2VicGFjaywgQnJvd3NlcmlmeSBldGMuXG5yZXF1aXJlKCd3aGF0d2ctZmV0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gc2VsZi5mZXRjaC5iaW5kKHNlbGYpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgoZ2xvYmFsLldIQVRXR0ZldGNoID0ge30pKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6XG4gICAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICAgJ0Jsb2InIGluIHNlbGYgJiZcbiAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuZXcgQmxvYigpO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfTtcblxuICBmdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdO1xuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXTtcbiAgICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGl0ZW1zLnB1c2gobmFtZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xuICAgICAgfTtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpO1xuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYik7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aCk7XG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKTtcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHk7XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcik7XG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keTtcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmw7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHM7XG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kO1xuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZTtcbiAgICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsO1xuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXQ7XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpO1xuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJztcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKTtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGw7XG4gICAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbDtcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbDtcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSk7XG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxuICB9O1xuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBib2R5XG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoJyYnKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKTtcbiAgICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKCk7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKCk7XG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnO1xuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzO1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDA7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snO1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdCk7XG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKTtcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9O1xuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSk7XG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcic7XG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH07XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdO1xuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH07XG5cbiAgZXhwb3J0cy5ET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvbjtcbiAgdHJ5IHtcbiAgICBuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xuICAgIH07XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGV4cG9ydHMuRE9NRXhjZXB0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgICAgfVxuXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfTtcbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKTtcbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocik7XG5cbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdCk7XG4gICAgfSlcbiAgfVxuXG4gIGZldGNoLnBvbHlmaWxsID0gdHJ1ZTtcblxuICBpZiAoIXNlbGYuZmV0Y2gpIHtcbiAgICBzZWxmLmZldGNoID0gZmV0Y2g7XG4gICAgc2VsZi5IZWFkZXJzID0gSGVhZGVycztcbiAgICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0O1xuICAgIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgfVxuXG4gIGV4cG9ydHMuSGVhZGVycyA9IEhlYWRlcnM7XG4gIGV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG4gIGV4cG9ydHMuUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgZXhwb3J0cy5mZXRjaCA9IGZldGNoO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iLCJpbXBvcnQge0NvbnN0YW50c30gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2pzL0NvbnN0YW50cyc7XG5pbXBvcnQgUHJlc2VudGF0aW9uQmFzZSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvanMvY2xhc3Nlcy9QcmVzZW50YXRpb24nO1xuaW1wb3J0IE1vYmlsZVNlcnZlckJyaWRnZSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvanMvY2xhc3Nlcy9Nb2JpbGVTZXJ2ZXJCcmlkZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVzZW50YXRpb24gZXh0ZW5kcyBQcmVzZW50YXRpb25CYXNle1xuXG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJvbGUsIHNldHRpbmdzKSB7XG4gICAgc3VwZXIoZGF0YSwgcm9sZSwgc2V0dGluZ3MpO1xuICAgIHRoaXMuJG92ZXJsYXkgPSAkKGAjb3ZlcmxheWApO1xuICB9XG5cbiAgY3JlYXRlTW9iaWxlU2VydmVyQnJpZGdlKCkge1xuICAgIHJldHVybiBuZXcgTW9iaWxlU2VydmVyQnJpZGdlKHRoaXMsIHRoaXMuc2V0dGluZ3MpO1xuICB9XG5cbiAgaGFuZGxlTW9iaWxlU2VydmVyTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgaWYoIW1lc3NhZ2UuY29udGVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZihtZXNzYWdlLmNvbnRlbnQuYWN0aW9uID09PSBgc2V0Q3VycmVudFNsaWRlSW5kZXhgKSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRTbGlkZUluZGV4KG1lc3NhZ2UuY29udGVudC5jdXJyZW50U2xpZGVJbmRleCk7XG4gICAgfSBlbHNlIGlmKG1lc3NhZ2UuY29udGVudC5hY3Rpb24gPT09IENvbnN0YW50cy5CTElOSykge1xuICAgICAgdGhpcy5ibGluayhtZXNzYWdlLmNvbnRlbnQudGV4dCwgbWVzc2FnZS5jb250ZW50LmJhY2tncm91bmRDb2xvcik7XG4gICAgfVxuICB9XG5cbiAgc2V0Q3VycmVudFNsaWRlSW5kZXgoaW5kZXgpIHtcbiAgICBzdXBlci5zZXRDdXJyZW50U2xpZGVJbmRleChpbmRleCk7XG4gICAgaWYodGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5yZW1vdmVDbGFzcyhgYWN0aXZlYCk7XG4gICAgfVxuICAgIGlmKHRoaXMuYmxpbmtJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmJsaW5rSW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIGJsaW5rKHRleHQsIGJhY2tncm91bmRDb2xvcikge1xuICAgIC8vb3ZlcmxheSBpbXBvcnRhbnQsIGJsaW5raW5nIHRleHRcbiAgICB0aGlzLiRvdmVybGF5LmZpbmQoYC5jb250ZW50YCkuaHRtbCh0ZXh0KTtcbiAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKGBhY3RpdmVgKTtcbiAgICBpZih0aGlzLmJsaW5rSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5ibGlua0ludGVydmFsKTtcbiAgICB9XG4gICAgdGhpcy5ibGlua0ludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5ibGlua1RvZ2dsZS5iaW5kKHRoaXMsIGJhY2tncm91bmRDb2xvciksIDUwMCk7XG4gIH1cblxuICBibGlua1RvZ2dsZShiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICB0aGlzLiRvdmVybGF5LnRvZ2dsZUNsYXNzKGBibGluay1vbmApO1xuICAgIGlmKHRoaXMuJG92ZXJsYXkuaGFzQ2xhc3MoYGJsaW5rLW9uYCkpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkuY3NzKGBiYWNrZ3JvdW5kLWNvbG9yYCwgYmFja2dyb3VuZENvbG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kb3ZlcmxheS5jc3MoYGJhY2tncm91bmQtY29sb3JgLCBgYCk7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCBQcmVzZW50YXRpb24gZnJvbSAnLi9jbGFzc2VzL1ByZXNlbnRhdGlvbic7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnaXNvbW9ycGhpYy1mZXRjaCc7XG5cbigoKSA9PiB7XG5cbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCBzZXR0aW5ncyA9IHtcbiAgICAgIHByZXNlbnRhdGlvblBhdGg6IGAvYCxcbiAgICAgIG1vYmlsZVNlcnZlclVybDogYGBcbiAgICB9O1xuICAgIC8vZ2V0IHNsaWRlcyBieSB4bWxodHRwcmVxdWVzdFxuICAgIGZldGNoKGAvZGF0YS5qc29uP3Q9JHsgIERhdGUubm93KCl9YClcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YS5qc29uKCkpXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgbmV3IFByZXNlbnRhdGlvbihkYXRhLCBgbW9iaWxlYCwgc2V0dGluZ3MpO1xuICAgICAgfSk7XG4gIH07XG5cbiAgaW5pdCgpO1xufSkoKTtcbiIsImV4cG9ydCBjb25zdCBDb25zdGFudHMgPSB7XG4gIEdPX1RPX1BSRVZJT1VTX1NMSURFOiBgZ29Ub1ByZXZpb3VzU2xpZGVgLFxuICBHT19UT19ORVhUX1NMSURFOiBgZ29Ub05leHRTbGlkZWAsXG4gIFNFVF9TTElERVM6IGBzZXRTbGlkZXNgLFxuICBTRVRfQ1VSUkVOVF9TTElERV9JTkRFWDogYHNldEN1cnJlbnRTbGlkZUluZGV4YCxcblxuICBNRVNTQUdFOiBgbWVzc2FnZWAsXG4gIFNPQ0tFVF9TRU5EOiBgc29ja2V0U2VuZGAsXG4gIFNPQ0tFVF9SRUNFSVZFOiBgc29ja2V0UmVjZWl2ZWAsXG4gIEpPSU5fU0xJREVfUk9PTTogYGpvaW5TbGlkZVJvb21gLFxuICBMRUFWRV9TTElERV9ST09NOiBgbGVhdmVTbGlkZVJvb21gLFxuXG4gIFJPTEVfUFJFU0VOVEFUSU9OOiBgcHJlc2VudGF0aW9uYCxcbiAgUk9MRV9NT0JJTEU6IGBtb2JpbGVgLFxuXG4gIFNUQVRFX0FDVElWRTogYGFjdGl2ZWAsXG4gIFNUQVRFX0lOQUNUSVZFOiBgaW5hY3RpdmVgLFxuXG4gIFNFVF9TVUJTVEFURTogYHNldFN1YnN0YXRlYCxcblxuICBDSElMRF9BUFBfU0FWRV9DT0RFOiBgY2hpbGRBcHBTYXZlQ29kZWAsXG4gIENISUxEX0FQUF9SVU5fQ09ERTogYGNoaWxkQXBwUnVuQ29kZWAsXG4gIENISUxEX0FQUF9TVERPVVRfREFUQTogYGNoaWxkQXBwU3Rkb3V0RGF0YWAsXG4gIENISUxEX0FQUF9TVERFUlJfREFUQTogYGNoaWxkQXBwU3RkZXJyRGF0YWAsXG5cbiAgT1BFTl9DT01NQU5EX0xJTkU6IGBvcGVuQ29tbWFuZExpbmVgLFxuICBPUEVOX0NBTUVSQTogYG9wZW5DYW1lcmFgLFxuXG4gIEJMSU5LOiBgYmxpbmtgLFxuXG4gIEhFQVJUX1JBVEVfUE9MQVI6IGBoZWFydFJhdGVQb2xhcmAsXG5cbiAgU0VUX1RFQU06IGBzZXRUZWFtYCxcbiAgVVBEQVRFX01PVElPTjogYHVwZGF0ZU1vdGlvbmAsXG5cbiAgWU9VX1dJTjogYHlvdVdpbmAsXG4gIFlPVV9MT1NFOiBgeW91TG9zZWAsXG5cbiAgU0hBS0VfWU9VUl9QSE9ORVNfSU5UUk86IGBzaGFrZVlvdXJQaG9uZXNJbnRyb2AsXG4gIFNIQUtFX1lPVVJfUEhPTkVTX0dBTUU6IGBzaGFrZVlvdXJQaG9uZXNHYW1lYCxcbiAgU0hBS0VfWU9VUl9QSE9ORVNfRklOSVNIRUQ6IGBzaGFrZVlvdXJQaG9uZXNGaW5pc2hlZGAsXG5cbiAgU0hBS0VfWU9VUl9QSE9ORVNfQ0xJRU5UX0FEREVEOiBgc2hha2VZb3VyUGhvbmVzQ2xpZW50QWRkZWRgLFxuICBTSEFLRV9ZT1VSX1BIT05FU19DTElFTlRfUkVNT1ZFRDogYHNoYWtlWW91clBob25lc0NsaWVudFJlbW92ZWRgLFxuICBTSEFLRV9ZT1VSX1BIT05FU19DTElFTlRfTElTVDogYHNoYWtlWW91clBob25lc0NsaWVudExpc3RgLFxuICBTSEFLRV9ZT1VSX1BIT05FU19DTElFTlRfVVBEQVRFOiBgc2hha2VZb3VyUGhvbmVzQ2xpZW50VXBkYXRlYCxcblxuICBISUdIRVNUX0hFQVJUUkFURV9HQU1FX0lOVFJPOiBgaGlnaGVzdEhlYXJ0cmF0ZUdhbWVJbnRyb2AsXG4gIEhJR0hFU1RfSEVBUlRSQVRFX0dBTUVfR0FNRTogYGhpZ2hlc3RIZWFydHJhdGVHYW1lR2FtZWAsXG4gIEhJR0hFU1RfSEVBUlRSQVRFX0dBTUVfRklOSVNIRUQ6IGBoaWdoZXN0SGVhcnRyYXRlR2FtZUZpbmlzaGVkYCxcblxuICBMT1dFU1RfSEVBUlRSQVRFX0dBTUVfSU5UUk86IGBsb3dlc3RIZWFydHJhdGVHYW1lSW50cm9gLFxuICBMT1dFU1RfSEVBUlRSQVRFX0dBTUVfR0FNRTogYGxvd2VzdEhlYXJ0cmF0ZUdhbWVHYW1lYCxcbiAgTE9XRVNUX0hFQVJUUkFURV9HQU1FX0ZJTklTSEVEOiBgbG93ZXN0SGVhcnRyYXRlR2FtZUZpbmlzaGVkYCxcblxuICBVUERBVEVfUkVBQ1RJT05fU1BFRUQ6IGB1cGRhdGVSZWFjdGlvblNwZWVkYCxcblxuICBSRUFDVF9QSE9ORVNfSU5UUk86IGByZWFjdFBob25lc0ludHJvYCxcbiAgUkVBQ1RfUEhPTkVTX0dBTUU6IGByZWFjdFBob25lc0dhbWVgLFxuICBSRUFDVF9QSE9ORVNfRklOSVNIRUQ6IGByZWFjdFBob25lc0ZpbmlzaGVkYCxcblxuICBEQU5DRV9QQURfR0FNRV9JTlRSTzogYGRhbmNlUGFkR2FtZUludHJvYCxcbiAgREFOQ0VfUEFEX0dBTUVfR0FNRTogYGRhbmNlUGFkR2FtZUdhbWVgLFxuICBEQU5DRV9QQURfR0FNRV9GSU5JU0hFRDogYGRhbmNlUGFkR2FtZUZpbmlzaGVkYCxcbn07XG4iLCJpbXBvcnQge0NvbnN0YW50c30gZnJvbSAnLi4vQ29uc3RhbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudEJhc2V7XG5cbiAgY29uc3RydWN0b3IoJHNsaWRlSG9sZGVyKSB7XG4gICAgdGhpcy4kc2xpZGVIb2xkZXIgPSAkc2xpZGVIb2xkZXI7XG4gICAgdGhpcy5zbGlkZUhvbGRlciA9IHRoaXMuJHNsaWRlSG9sZGVyWzBdO1xuICAgIHRoaXMud2lkdGggPSB0aGlzLnNsaWRlSG9sZGVyLm9mZnNldFdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zbGlkZUhvbGRlci5vZmZzZXRIZWlnaHQ7XG4gICAgdGhpcy5wcmV2V2lkdGggPSB0aGlzLndpZHRoO1xuICAgIHRoaXMucHJldkhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMud2lkdGhDaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5oZWlnaHRDaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5zaXplQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3JjID0gJHNsaWRlSG9sZGVyLmF0dHIoYGRhdGEtc3JjYCk7XG4gICAgdGhpcy5uYW1lID0gJHNsaWRlSG9sZGVyLmF0dHIoYGRhdGEtbmFtZWApO1xuICAgIHRoaXMuc2V0dGluZ3MgPSB7fTtcbiAgICB0cnkge1xuICAgICAgdGhpcy5zZXR0aW5ncyA9IEpTT04ucGFyc2UoJChgI3ByZXNlbnRhdGlvbmApLmF0dHIoYGRhdGEtcHJlc2VudGF0aW9uLXNldHRpbmdzYCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICAgIHRoaXMuZnBzID0gNjA7XG4gICAgdGhpcy5fYW5pbWF0aW9uRnJhbWVJZCA9IGZhbHNlO1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMDtcbiAgICB0aGlzLl9kZWx0YSA9IDA7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBmYWxzZTtcbiAgICB0aGlzLl9sYXN0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDtcblxuICAgIHRoaXMuc3RhcnRMaXN0ZW5pbmdGb3JNZXNzYWdlcygpO1xuXG4gICAgdGhpcy5fX2RyYXdMb29wID0gdGhpcy5fZHJhd0xvb3AuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IDEwMDAgLyB0aGlzLmZwcztcblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgJHNsaWRlSG9sZGVyLnRyaWdnZXIoYGxvYWRgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXJ0TGlzdGVuaW5nRm9yTWVzc2FnZXMoKSB7XG4gICAgdGhpcy5fc2xpZGVIb2xkZXJNZXNzYWdlVG9TbGlkZUhhbmRsZXIgPSB0aGlzLnNsaWRlSG9sZGVyTWVzc2FnZVRvU2xpZGVIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy4kc2xpZGVIb2xkZXIub24oYG1lc3NhZ2UtdG8tc2xpZGVgLCB0aGlzLl9zbGlkZUhvbGRlck1lc3NhZ2VUb1NsaWRlSGFuZGxlcik7XG4gIH1cblxuICBzdG9wTGlzdGVuaW5nRm9yTWVzc2FnZXMoKSB7XG4gICAgdGhpcy4kc2xpZGVIb2xkZXIub2ZmKGBtZXNzYWdlLXRvLXNsaWRlYCwgdGhpcy5fc2xpZGVIb2xkZXJNZXNzYWdlVG9TbGlkZUhhbmRsZXIpO1xuICB9XG5cbiAgc2xpZGVIb2xkZXJNZXNzYWdlVG9TbGlkZUhhbmRsZXIoZXZlbnQsIG1lc3NhZ2UpIHtcbiAgICB0aGlzLnJlY2VpdmVNZXNzYWdlKHtkYXRhOiBtZXNzYWdlfSk7XG4gIH1cblxuICByZWNlaXZlTWVzc2FnZShldmVudCkge1xuICAgIGlmKCFldmVudC5kYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaChldmVudC5kYXRhLmFjdGlvbikge1xuICAgIGNhc2UgYHNldFN0YXRlYDpcbiAgICAgIHRoaXMuc2V0U3RhdGUoZXZlbnQuZGF0YS5zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGBkZXN0cm95YDpcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDb25zdGFudHMuU09DS0VUX1JFQ0VJVkU6XG4gICAgICB0aGlzLnJlY2VpdmVTb2NrZXRNZXNzYWdlKGV2ZW50LmRhdGEubWVzc2FnZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy5oYW5kbGVNZXNzYWdlKGV2ZW50LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnN0b3BMaXN0ZW5pbmdGb3JNZXNzYWdlcygpO1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZUlkKTtcbiAgfVxuXG4gIHBvc3RNZXNzYWdlKGRhdGEpIHtcbiAgICB0aGlzLiRzbGlkZUhvbGRlci50cmlnZ2VyKGBtZXNzYWdlLWZyb20tc2xpZGVgLCBkYXRhKTtcbiAgfVxuXG4gIGhhbmRsZU1lc3NhZ2UoZGF0YSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIH1cblxuICBwb3N0U29ja2V0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICBhY3Rpb246IENvbnN0YW50cy5TT0NLRVRfU0VORCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfVxuXG4gIHJlY2VpdmVTb2NrZXRNZXNzYWdlKG1lc3NhZ2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB9XG5cbiAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICBpZihzdGF0ZSAhPT0gdGhpcy5zdGF0ZSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlZCgpO1xuICAgICAgaWYodGhpcy5zdGF0ZSA9PT0gQ29uc3RhbnRzLlNUQVRFX0FDVElWRSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IDA7XG4gICAgICAgIHRoaXMuX2RyYXdMb29wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0aW9uRnJhbWVJZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25TdGF0ZUNoYW5nZWQoKSB7XG4gIH1cblxuICBfZHJhd0xvb3AoKSB7XG4gICAgdGhpcy5fYW5pbWF0aW9uRnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fX2RyYXdMb29wKTtcbiAgICB0aGlzLl9jdXJyZW50VGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgdGhpcy5fZGVsdGEgPSAodGhpcy5fY3VycmVudFRpbWUgLSB0aGlzLl9sYXN0VGltZSk7XG4gICAgaWYodGhpcy5fZGVsdGEgPiB0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgdGhpcy5jdXJyZW50RnJhbWUrKztcbiAgICAgIHRoaXMucHJldldpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgIHRoaXMucHJldkhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuc2xpZGVIb2xkZXIub2Zmc2V0V2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc2xpZGVIb2xkZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgdGhpcy53aWR0aENoYW5nZWQgPSAodGhpcy53aWR0aCAhPT0gdGhpcy5wcmV2V2lkdGgpO1xuICAgICAgdGhpcy5oZWlnaHRDaGFuZ2VkID0gKHRoaXMuaGVpZ2h0ICE9PSB0aGlzLnByZXZIZWlnaHQpO1xuICAgICAgdGhpcy5zaXplQ2hhbmdlZCA9ICh0aGlzLndpZHRoQ2hhbmdlZCB8fCB0aGlzLmhlaWdodENoYW5nZWQpO1xuICAgICAgdGhpcy5kcmF3TG9vcCh0aGlzLl9kZWx0YSk7XG4gICAgICB0aGlzLl9sYXN0VGltZSA9IHRoaXMuX2N1cnJlbnRUaW1lIC0gKHRoaXMuX2RlbHRhICUgdGhpcy5faW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIGRyYXdMb29wKGRlbHRhKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgfVxuXG59XG4iLCJpbXBvcnQgZmV0Y2ggZnJvbSAnaXNvbW9ycGhpYy1mZXRjaCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vYmlsZVNlcnZlckJyaWRnZSB7XG5cbiAgY29uc3RydWN0b3IocHJlc2VudGF0aW9uLCBzZXR0aW5ncykge1xuICAgIHRoaXMucHJlc2VudGF0aW9uID0gcHJlc2VudGF0aW9uO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB0aGlzLmNvbm5lY3QoKTtcbiAgfVxuXG4gIGNvbm5lY3QoKSB7XG4gICAgY29uc29sZS5sb2coYE1vYmlsZVNlcnZlckJyaWRnZS5jb25uZWN0YCk7XG4gICAgLy9jb25zb2xlLndhcm4oJ01vYmlsZVNlcnZlckJyaWRnZSBkaXNhYmxlZCcpO1xuICAgIC8vcmV0dXJuO1xuICAgIC8vcG9zdCB0byB0aGUgYXBpXG4gICAgZmV0Y2goYCR7dGhpcy5zZXR0aW5ncy5tb2JpbGVTZXJ2ZXJVcmx9L2xvZ2luYCwge1xuICAgICAgbWV0aG9kOiBgUE9TVGAsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh0aGlzLmdldExvZ2luQ3JlZGVudGlhbHMoKSksXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7J0NvbnRlbnQtVHlwZSc6IGBhcHBsaWNhdGlvbi9qc29uYH0pXG4gICAgfSlcbiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgLnRoZW4ocmVzdWx0ID0+IHRoaXMubG9naW5IYW5kbGVyKHJlc3VsdCkpXG4gICAgLmNhdGNoKGUgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jb25uZWN0KCksIDEwMDApO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0TG9naW5DcmVkZW50aWFscygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW1haWw6IHRoaXMuc2V0dGluZ3MubW9iaWxlU2VydmVyVXNlcm5hbWUsXG4gICAgICBwYXNzd29yZDogdGhpcy5zZXR0aW5ncy5tb2JpbGVTZXJ2ZXJQYXNzd29yZCxcbiAgICB9O1xuICB9XG5cbiAgbG9naW5IYW5kbGVyKHJlc3VsdCkge1xuICAgIHRoaXMudG9rZW4gPSByZXN1bHQudG9rZW47XG4gICAgdGhpcy5zb2NrZXQgPSBpbyh0aGlzLnNldHRpbmdzLm1vYmlsZVNlcnZlclVybCwge1xuICAgICAgcXVlcnk6IGB0b2tlbj0keyAgdGhpcy50b2tlbn1gLFxuICAgICAgcmVjb25uZWN0aW9uOiBmYWxzZSxcbiAgICAgIGZvcmNlTmV3OiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5zb2NrZXQub24oYGNvbm5lY3RgLCB0aGlzLnNvY2tldENvbm5lY3RIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc29ja2V0Lm9uKGBkaXNjb25uZWN0YCwgdGhpcy5zb2NrZXREaXNjb25uZWN0SGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNvY2tldC5vbihgbWVzc2FnZWAsIHRoaXMuc29ja2V0TWVzc2FnZUhhbmRsZXIuYmluZCh0aGlzKSk7XG4gIH1cblxuICBzb2NrZXRDb25uZWN0SGFuZGxlcigpIHtcbiAgICBjb25zb2xlLmxvZyhgTW9iaWxlU2VydmVyQnJpZGdlLnNvY2tldENvbm5lY3RIYW5kbGVyYCk7XG4gICAgdGhpcy5wcmVzZW50YXRpb24ubW9iaWxlU2VydmVyQnJpZGdlQ29ubmVjdGVkKCk7XG4gIH1cblxuICBzb2NrZXREaXNjb25uZWN0SGFuZGxlcigpIHtcbiAgICB0aGlzLmNvbm5lY3QoKTtcbiAgfVxuXG4gIHRyeVRvU2VuZCgpIHtcbiAgICBpZih0aGlzLnNvY2tldCkge1xuICAgICAgdGhpcy5zb2NrZXQuZW1pdC5hcHBseSh0aGlzLnNvY2tldCwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBzb2NrZXRNZXNzYWdlSGFuZGxlcihtZXNzYWdlKSB7XG4gICAgdGhpcy5wcmVzZW50YXRpb24ubW9iaWxlU2VydmVyTWVzc2FnZUhhbmRsZXIobWVzc2FnZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29uc3RhbnRzfSBmcm9tICcuLi9Db25zdGFudHMnO1xuaW1wb3J0IFNsaWRlQnJpZGdlIGZyb20gJy4vU2xpZGVCcmlkZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVzZW50YXRpb24ge1xuICAvKlxuICAgKiBkYXRhOiBqc29uIG9iamVjdCB3aXRoIHNsaWRlcyBhcnJheSBwcm9wZXJ0eVxuICAgKiByb2xlOiBtb2JpbGUgb3IgcHJlc2VudGF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhLCByb2xlLCBzZXR0aW5ncykge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5yb2xlID0gcm9sZTtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgJChgI3ByZXNlbnRhdGlvbmApLmF0dHIoYGRhdGEtcHJlc2VudGF0aW9uLXNldHRpbmdzYCwgSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpKTtcbiAgICB0aGlzLmN1cnJlbnRTbGlkZUluZGV4ID0gLTE7XG4gICAgdGhpcy5zbGlkZUhvbGRlcnMgPSBbXTtcbiAgICB0aGlzLm51bVNsaWRlSG9sZGVycyA9IDM7XG4gICAgdGhpcy5zbGlkZUJyaWRnZXMgPSBbXTtcbiAgICB0aGlzLnNsaWRlQnJpZGdlc0J5U2xpZGVOYW1lID0ge307XG5cbiAgICB0aGlzLmNyZWF0ZVNsaWRlSG9sZGVycygpO1xuICAgIHRoaXMuY3JlYXRlU2xpZGVCcmlkZ2VzKHRoaXMuZGF0YSk7XG5cbiAgICB0aGlzLm1vYmlsZVNlcnZlckJyaWRnZSA9IHRoaXMuY3JlYXRlTW9iaWxlU2VydmVyQnJpZGdlKCk7XG4gICAgdGhpcy5zdGFydExpc3RlbmluZ0Zvck1lc3NhZ2VzKCk7XG5cbiAgICB0aGlzLnNldEN1cnJlbnRTbGlkZUluZGV4KDApO1xuICB9XG5cbiAgc3RhcnRMaXN0ZW5pbmdGb3JNZXNzYWdlcygpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgbWVzc2FnZWAsIHRoaXMuc2xpZGVNZXNzYWdlSGFuZGxlci5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gIH1cblxuICBjcmVhdGVTbGlkZUhvbGRlcnMoKSB7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubnVtU2xpZGVIb2xkZXJzOyBpKyspIHtcbiAgICAgIGNvbnN0ICRzbGlkZUhvbGRlciA9ICQoYDxkaXYgY2xhc3M9XCJzbGlkZS1mcmFtZVwiIC8+YCk7XG4gICAgICB0aGlzLnNsaWRlSG9sZGVycy5wdXNoKCRzbGlkZUhvbGRlcik7XG4gICAgICAkKGAjcHJlc2VudGF0aW9uYCkuYXBwZW5kKCRzbGlkZUhvbGRlcik7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlU2xpZGVCcmlkZ2VzKGRhdGEpIHtcbiAgICBjb25zdCBudW1TbGlkZXMgPSBkYXRhLnNsaWRlcy5sZW5ndGg7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG51bVNsaWRlczsgaSsrKSB7XG4gICAgICBjb25zdCBzbGlkZUJyaWRnZSA9IHRoaXMuY3JlYXRlU2xpZGVCcmlkZ2UoZGF0YS5zbGlkZXNbaV0pO1xuICAgICAgdGhpcy5zbGlkZUJyaWRnZXMucHVzaChzbGlkZUJyaWRnZSk7XG4gICAgICB0aGlzLnNsaWRlQnJpZGdlc0J5U2xpZGVOYW1lW3NsaWRlQnJpZGdlLm5hbWVdID0gc2xpZGVCcmlkZ2U7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlU2xpZGVCcmlkZ2Uoc2xpZGUpIHtcbiAgICByZXR1cm4gbmV3IFNsaWRlQnJpZGdlKHNsaWRlKTtcbiAgfVxuXG4gIHNsaWRlTWVzc2FnZUhhbmRsZXIoZXZlbnQpIHtcbiAgICBpZighZXZlbnQuZGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2goZXZlbnQuZGF0YS5hY3Rpb24pIHtcbiAgICBjYXNlIENvbnN0YW50cy5TT0NLRVRfU0VORDpcbiAgICAgIGlmKHRoaXMubW9iaWxlU2VydmVyQnJpZGdlKSB7XG4gICAgICAgIHRoaXMubW9iaWxlU2VydmVyQnJpZGdlLnRyeVRvU2VuZChDb25zdGFudHMuTUVTU0FHRSwgZXZlbnQuZGF0YS5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG1vYmlsZVNlcnZlckJyaWRnZUNvbm5lY3RlZCgpIHtcbiAgICAvL2pvaW4gdGhlIHJvb21zIG9mIHRoZSBzbGlkZUhvbGRlcnNcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1TbGlkZUhvbGRlcnM7IGkrKykge1xuICAgICAgdGhpcy5tb2JpbGVTZXJ2ZXJCcmlkZ2UudHJ5VG9TZW5kKENvbnN0YW50cy5KT0lOX1NMSURFX1JPT00sICQodGhpcy5zbGlkZUhvbGRlcnNbaV0pLmF0dHIoYGRhdGEtbmFtZWApKTtcbiAgICB9XG4gIH1cblxuICBtb2JpbGVTZXJ2ZXJNZXNzYWdlSGFuZGxlcihtZXNzYWdlKSB7XG4gICAgaWYobWVzc2FnZS50YXJnZXQuc2xpZGUpIHtcbiAgICAgIC8vc2xpZGUgaGFzIHRvIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgICAgY29uc3Qgc2xpZGVCcmlkZ2UgPSB0aGlzLmdldFNsaWRlQnJpZGdlQnlOYW1lKG1lc3NhZ2UudGFyZ2V0LnNsaWRlKTtcbiAgICAgIGlmKHNsaWRlQnJpZGdlKSB7XG4gICAgICAgIHNsaWRlQnJpZGdlLnRyeVRvUG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogQ29uc3RhbnRzLlNPQ0tFVF9SRUNFSVZFLFxuICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vcHJlc2VudGF0aW9uIGhhcyB0byBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICAgIHRoaXMuaGFuZGxlTW9iaWxlU2VydmVyTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVNb2JpbGVTZXJ2ZXJNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmxvZyhgW3NoYXJlZC9QcmVzZW50YXRpb25dIGhhbmRsZU1vYmlsZVNlcnZlck1lc3NhZ2VgLCBtZXNzYWdlKTtcbiAgfVxuXG4gIGdldFNsaWRlQnJpZGdlQnlJbmRleChpbmRleCkge1xuICAgIGlmKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLnNsaWRlQnJpZGdlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWRlQnJpZGdlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGdldFNsaWRlQnJpZGdlQnlOYW1lKHNsaWRlTmFtZSkge1xuICAgIHJldHVybiB0aGlzLnNsaWRlQnJpZGdlc0J5U2xpZGVOYW1lW3NsaWRlTmFtZV07XG4gIH1cblxuICBnZXRTbGlkZUhvbGRlckZvclNsaWRlKHNsaWRlLCBzbGlkZXNOb3RUb0NsZWFyKSB7XG4gICAgaWYoc2xpZGUpIHtcbiAgICAgIGxldCAkc2xpZGVIb2xkZXIgPSAkKGAuc2xpZGUtZnJhbWVbZGF0YS1uYW1lPVwiJHsgIHNsaWRlLm5hbWUgIH1cIl1gKTtcbiAgICAgIGlmKCRzbGlkZUhvbGRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiAkc2xpZGVIb2xkZXJbMF07XG4gICAgICB9XG4gICAgICAvL2dldCBhIGZyZWUgc2xpZGVIb2xkZXJcbiAgICAgIGNvbnN0IHNsaWRlTmFtZXNOb3RUb0NsZWFyID0gW107XG4gICAgICAkKHNsaWRlc05vdFRvQ2xlYXIpLmVhY2goZnVuY3Rpb24oaW5kZXgsIG9iail7XG4gICAgICAgIHNsaWRlTmFtZXNOb3RUb0NsZWFyLnB1c2gob2JqLm5hbWUpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCAkc2xpZGVIb2xkZXJzID0gJChgLnNsaWRlLWZyYW1lYCk7XG4gICAgICBmb3IgKGxldCBpID0gJHNsaWRlSG9sZGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAkc2xpZGVIb2xkZXIgPSAkKCRzbGlkZUhvbGRlcnNbaV0pO1xuICAgICAgICBjb25zdCBuYW1lID0gJHNsaWRlSG9sZGVyLmF0dHIoYGRhdGEtbmFtZWApO1xuICAgICAgICBpZighbmFtZSB8fCBzbGlkZU5hbWVzTm90VG9DbGVhci5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgIHJldHVybiAkc2xpZGVIb2xkZXJbMF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ29Ub1ByZXZpb3VzU2xpZGUoKSB7XG4gICAgdGhpcy5zZXRDdXJyZW50U2xpZGVJbmRleCh0aGlzLmN1cnJlbnRTbGlkZUluZGV4IC0gMSk7XG4gIH1cblxuICBnb1RvTmV4dFNsaWRlKCkge1xuICAgIHRoaXMuc2V0Q3VycmVudFNsaWRlSW5kZXgodGhpcy5jdXJyZW50U2xpZGVJbmRleCArIDEpO1xuICB9XG5cbiAgc2V0Q3VycmVudFNsaWRlSW5kZXgodmFsdWUpIHtcbiAgICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHZhbHVlLCB0aGlzLnNsaWRlQnJpZGdlcy5sZW5ndGggLSAxKSk7XG4gICAgaWYodmFsdWUgIT09IHRoaXMuY3VycmVudFNsaWRlSW5kZXgpIHtcbiAgICAgIHRoaXMuY3VycmVudFNsaWRlSW5kZXggPSB2YWx1ZTtcblxuICAgICAgY29uc3QgY3VycmVudFNsaWRlQnJpZGdlID0gdGhpcy5nZXRTbGlkZUJyaWRnZUJ5SW5kZXgodGhpcy5jdXJyZW50U2xpZGVJbmRleCk7XG4gICAgICBjb25zdCBwcmV2aW91c1NsaWRlQnJpZGdlID0gdGhpcy5nZXRTbGlkZUJyaWRnZUJ5SW5kZXgodGhpcy5jdXJyZW50U2xpZGVJbmRleCAtIDEpO1xuICAgICAgY29uc3QgbmV4dFNsaWRlQnJpZGdlID0gdGhpcy5nZXRTbGlkZUJyaWRnZUJ5SW5kZXgodGhpcy5jdXJyZW50U2xpZGVJbmRleCArIDEpO1xuXG4gICAgICAvL3JlbW92ZSBcInVzZWRcIiBjbGFzcyBmcm9tIHNsaWRlIGhvbGRlcnNcbiAgICAgICQoYC5zbGlkZS1mcmFtZWApLnJlbW92ZUF0dHIoYGRhdGEtdXNlZGAsIGZhbHNlKTtcblxuICAgICAgY29uc3QgY3VycmVudFNsaWRlSG9sZGVyID0gdGhpcy5nZXRTbGlkZUhvbGRlckZvclNsaWRlKGN1cnJlbnRTbGlkZUJyaWRnZSwgW3ByZXZpb3VzU2xpZGVCcmlkZ2UsIG5leHRTbGlkZUJyaWRnZV0pO1xuICAgICAgdGhpcy5zZXR1cFNsaWRlSG9sZGVyKGN1cnJlbnRTbGlkZUhvbGRlciwgY3VycmVudFNsaWRlQnJpZGdlLCBDb25zdGFudHMuU1RBVEVfQUNUSVZFLCAwKTtcblxuICAgICAgY29uc3QgcHJldmlvdXNTbGlkZUhvbGRlciA9IHRoaXMuZ2V0U2xpZGVIb2xkZXJGb3JTbGlkZShwcmV2aW91c1NsaWRlQnJpZGdlLCBbY3VycmVudFNsaWRlQnJpZGdlLCBuZXh0U2xpZGVCcmlkZ2VdKTtcbiAgICAgIHRoaXMuc2V0dXBTbGlkZUhvbGRlcihwcmV2aW91c1NsaWRlSG9sZGVyLCBwcmV2aW91c1NsaWRlQnJpZGdlLCBDb25zdGFudHMuU1RBVEVfSU5BQ1RJVkUsIGAtMTAwJWApO1xuXG4gICAgICBjb25zdCBuZXh0U2xpZGVIb2xkZXIgPSB0aGlzLmdldFNsaWRlSG9sZGVyRm9yU2xpZGUobmV4dFNsaWRlQnJpZGdlLCBbcHJldmlvdXNTbGlkZUJyaWRnZSwgY3VycmVudFNsaWRlQnJpZGdlXSk7XG4gICAgICB0aGlzLnNldHVwU2xpZGVIb2xkZXIobmV4dFNsaWRlSG9sZGVyLCBuZXh0U2xpZGVCcmlkZ2UsIENvbnN0YW50cy5TVEFURV9JTkFDVElWRSwgYDEwMCVgKTtcblxuICAgICAgLy9jbGVhciBhdHRyaWJ1dGVzIG9mIHVudXNlZCBzbGlkZSBmcmFtZXNcbiAgICAgICQoYC5zbGlkZS1mcmFtZWApLmVhY2goZnVuY3Rpb24oaW5kZXgsIHNsaWRlSG9sZGVyKXtcbiAgICAgICAgaWYoISQoc2xpZGVIb2xkZXIpLmF0dHIoYGRhdGEtdXNlZGApKSB7XG4gICAgICAgICAgJChzbGlkZUhvbGRlcikucmVtb3ZlQXR0cihgZGF0YS11c2VkYCkucmVtb3ZlQXR0cihgZGF0YS1uYW1lYCkucmVtb3ZlQXR0cihgZGF0YS1zcmNgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vYWxsIG90aGVyIHNsaWRlSG9sZGVyIGJyaWRnZXMgc2hvdWxkIGJlIHVubGlua2VkIGZyb20gdGhlaXIgc2xpZGVIb2xkZXJcbiAgICAgIHRoaXMuc2xpZGVCcmlkZ2VzLmZvckVhY2goZnVuY3Rpb24oc2xpZGVCcmlkZ2Upe1xuICAgICAgICBpZihzbGlkZUJyaWRnZSA9PT0gY3VycmVudFNsaWRlQnJpZGdlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNsaWRlQnJpZGdlID09PSBwcmV2aW91c1NsaWRlQnJpZGdlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNsaWRlQnJpZGdlID09PSBuZXh0U2xpZGVCcmlkZ2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVCcmlkZ2Uuc2xpZGVIb2xkZXIgPSBudWxsO1xuICAgICAgfSk7XG5cbiAgICAgIGJlYW4uZmlyZSh0aGlzLCBDb25zdGFudHMuU0VUX0NVUlJFTlRfU0xJREVfSU5ERVgsIFt0aGlzLmN1cnJlbnRTbGlkZUluZGV4XSk7XG4gICAgfVxuICB9XG5cbiAgc2V0dXBTbGlkZUhvbGRlcihzbGlkZUhvbGRlciwgc2xpZGVCcmlkZ2UsIHN0YXRlLCBsZWZ0KSB7XG4gICAgaWYoc2xpZGVIb2xkZXIpIHtcbiAgICAgIGxldCBzcmMgPSBgc2xpZGVzLyR7ICBzbGlkZUJyaWRnZS5uYW1lICB9Lmh0bWxgO1xuICAgICAgaWYoc2xpZGVCcmlkZ2UuZGF0YVt0aGlzLnJvbGVdICYmIHNsaWRlQnJpZGdlLmRhdGFbdGhpcy5yb2xlXS51cmwpIHtcbiAgICAgICAgc3JjID0gc2xpZGVCcmlkZ2UuZGF0YVt0aGlzLnJvbGVdLnVybDtcbiAgICAgIH1cbiAgICAgIHNyYyA9IHRoaXMucHJvY2Vzc1NsaWRlU3JjKHNyYyk7XG4gICAgICBpZihzbGlkZUJyaWRnZS5pc0FscmVhZHlDb3JyZWN0bHlBdHRhY2hlZChzbGlkZUhvbGRlciwgc3JjKSkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKHNsaWRlQnJpZGdlLm5hbWUgKyAnIGFscmVhZHkgYXR0YWNoZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXR0YWNoVG9TbGlkZUhvbGRlcihzbGlkZUhvbGRlciwgc2xpZGVCcmlkZ2UsIHNyYyk7XG4gICAgICB9XG4gICAgICBzbGlkZUJyaWRnZS5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgICAkKHNsaWRlSG9sZGVyKS5jc3MoYGxlZnRgLCBsZWZ0KTtcbiAgICAgICQoc2xpZGVIb2xkZXIpLmF0dHIoYGRhdGEtdXNlZGAsIDEpO1xuICAgIH1cbiAgfVxuXG4gIGF0dGFjaFRvU2xpZGVIb2xkZXIoc2xpZGVIb2xkZXIsIHNsaWRlQnJpZGdlLCBzcmMpIHtcbiAgICAvL2xpc3RlbiBmb3IgZXZlbnRzIG9uIHRoaXMgc2xpZGVIb2xkZXJcbiAgICAkKHNsaWRlSG9sZGVyKS5vZmYoYG1lc3NhZ2UtZnJvbS1zbGlkZWApO1xuICAgICQoc2xpZGVIb2xkZXIpLm9uKGBtZXNzYWdlLWZyb20tc2xpZGVgLCAoZXZlbnQsIG1lc3NhZ2UpID0+ICB7XG4gICAgICB0aGlzLnNsaWRlTWVzc2FnZUhhbmRsZXIoe2RhdGE6IG1lc3NhZ2V9KTtcbiAgICB9KTtcbiAgICAvL2xlYXZlIHByZXZpb3VzIGNoYW5uZWwgb2YgdGhpcyBzbGlkZUhvbGRlclxuICAgIGlmKHRoaXMubW9iaWxlU2VydmVyQnJpZGdlKSB7XG4gICAgICB0aGlzLm1vYmlsZVNlcnZlckJyaWRnZS50cnlUb1NlbmQoQ29uc3RhbnRzLkxFQVZFX1NMSURFX1JPT00sICQoc2xpZGVIb2xkZXIpLmF0dHIoYGRhdGEtbmFtZWApKTtcbiAgICB9XG4gICAgLy9hZGQgdGhlIGpvaW4gYXMgYSBjYWxsYmFjayBmb3IgdGhlIG9ubG9hZCBldmVudFxuICAgIHNsaWRlQnJpZGdlLmF0dGFjaFRvU2xpZGVIb2xkZXIoc2xpZGVIb2xkZXIsIHNyYywgdGhpcy5zbGlkZUxvYWRlZC5iaW5kKHRoaXMsIHNsaWRlSG9sZGVyLCBzbGlkZUJyaWRnZSwgc3JjKSk7XG4gIH1cblxuICBzbGlkZUxvYWRlZChzbGlkZUhvbGRlciwgc2xpZGVCcmlkZ2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIC8vam9pbiBuZXcgY2hhbm5lbFxuICAgIGlmKHRoaXMubW9iaWxlU2VydmVyQnJpZGdlKSB7XG4gICAgICB0aGlzLm1vYmlsZVNlcnZlckJyaWRnZS50cnlUb1NlbmQoQ29uc3RhbnRzLkpPSU5fU0xJREVfUk9PTSwgJChzbGlkZUhvbGRlcikuYXR0cihgZGF0YS1uYW1lYCkpO1xuICAgIH1cbiAgfVxuXG4gIHByb2Nlc3NTbGlkZVNyYyhzcmMpIHtcbiAgICByZXR1cm4gc3JjO1xuICB9XG5cbiAgY3JlYXRlTW9iaWxlU2VydmVyQnJpZGdlKCkge1xuICAgIC8vdG8gaW1wbGVtZW50IGluIGV4dGVuZGluZyBjbGFzc2VzXG4gIH1cbn1cbiIsImltcG9ydCBmZXRjaCBmcm9tICdpc29tb3JwaGljLWZldGNoJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVCcmlkZ2Uge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmRhdGEubmFtZTtcbiAgfVxuXG4gIGlzQWxyZWFkeUNvcnJlY3RseUF0dGFjaGVkKHNsaWRlSG9sZGVyLCBzcmMpIHtcbiAgICByZXR1cm4gKHRoaXMuc2xpZGVIb2xkZXIgPT09IHNsaWRlSG9sZGVyICYmICQoc2xpZGVIb2xkZXIpLmF0dHIoYGRhdGEtbmFtZWApID09PSB0aGlzLm5hbWUgJiYgJChzbGlkZUhvbGRlcikuYXR0cihgZGF0YS1zcmNgKSA9PT0gc3JjKTtcbiAgfVxuXG4gIGF0dGFjaFRvU2xpZGVIb2xkZXIoc2xpZGVIb2xkZXIsIHNyYywgY2IpIHtcbiAgICB0aGlzLnNsaWRlSG9sZGVyID0gc2xpZGVIb2xkZXI7XG4gICAgLy9ub3RpZnkgdGhlIGNvbnRlbnQgaXQgaXMgYmVpbmcgY2xlYXJlZFxuICAgIHRoaXMudHJ5VG9Qb3N0TWVzc2FnZSh7YWN0aW9uOiBgZGVzdHJveWB9KTtcbiAgICAvL2NsZWFyIHRoZSBjdXJyZW50IGNvbnRlbnRcbiAgICB0aGlzLnNsaWRlSG9sZGVyLmlubmVySFRNTCA9IGBgO1xuICAgICQoc2xpZGVIb2xkZXIpLmF0dHIoYGRhdGEtbmFtZWAsIHRoaXMubmFtZSk7XG4gICAgJChzbGlkZUhvbGRlcikuYWRkQ2xhc3MoYGxvYWRpbmdgKTtcblxuICAgICQoc2xpZGVIb2xkZXIpLm9mZihgbG9hZGApO1xuICAgICQoc2xpZGVIb2xkZXIpLm9uKGBsb2FkYCwgKCkgPT4ge1xuICAgICAgdGhpcy50cnlUb1Bvc3RNZXNzYWdlKHtcbiAgICAgICAgYWN0aW9uOiBgc2V0U3RhdGVgLFxuICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZVxuICAgICAgfSk7XG4gICAgICAkKHNsaWRlSG9sZGVyKS5vZmYoYGxvYWRgKTtcbiAgICB9KTtcblxuICAgIGlmKHNyYyAhPT0gJChzbGlkZUhvbGRlcikuYXR0cihgZGF0YS1zcmNgKSkge1xuICAgICAgLy9mZXRjaCB0aGUgaHRtbFxuICAgICAgZmV0Y2goc3JjKVxuICAgICAgICAudGhlbihyZXN1bHQgPT4gcmVzdWx0LnRleHQoKSlcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+ICQocmVzdWx0KSlcbiAgICAgICAgLnRoZW4oJHJlc3VsdCA9PiB7XG4gICAgICAgICAgJChzbGlkZUhvbGRlcikuaHRtbCgkcmVzdWx0Lmh0bWwoKSk7XG4gICAgICAgICAgJChzbGlkZUhvbGRlcikucmVtb3ZlQ2xhc3MoYGxvYWRpbmdgKTtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgJChzbGlkZUhvbGRlcikucmVtb3ZlQ2xhc3MoYGxvYWRpbmdgKTtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9KTtcbiAgICAgICQoc2xpZGVIb2xkZXIpLmF0dHIoYGRhdGEtc3JjYCwgc3JjKTtcbiAgICB9XG4gIH1cblxuICB0cnlUb1Bvc3RNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZighdGhpcy5zbGlkZUhvbGRlcilcbiAgICB7XG4gICAgICBjb25zb2xlLmxvZyhgJHt0aGlzLm5hbWUgIH0gcG9zdCBmYWlsYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vdHJpZ2dlciB3aXRoIGpxdWVyeVxuICAgICQodGhpcy5zbGlkZUhvbGRlcikudHJpZ2dlcihgbWVzc2FnZS10by1zbGlkZWAsIG1lc3NhZ2UpO1xuICB9XG5cbiAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgdGhpcy50cnlUb1Bvc3RNZXNzYWdlKHtcbiAgICAgIGFjdGlvbjogYHNldFN0YXRlYCxcbiAgICAgIHN0YXRlOiB0aGlzLnN0YXRlXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29uc3RhbnRzfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvanMvQ29uc3RhbnRzJztcbmltcG9ydCBDb250ZW50QmFzZSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvanMvY2xhc3Nlcy9Db250ZW50QmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWN0UGhvbmVzU2xpZGUgZXh0ZW5kcyBDb250ZW50QmFzZXtcblxuICBjb25zdHJ1Y3Rvcigkc2xpZGVIb2xkZXIpIHtcbiAgICBzdXBlcigkc2xpZGVIb2xkZXIpO1xuXG4gICAgdGhpcy50b3RhbFJlYWN0aW9uU3BlZWQgPSAwO1xuICAgIHRoaXMubnVtUmVhY3Rpb25TcGVlZHMgPSAwO1xuICAgIHRoaXMubnVtQ29ycmVjdEFuc3dlcnMgPSAxO1xuICAgIHRoaXMuYXZlcmFnZVJlYWN0aW9uU3BlZWQgPSA5OTk5OTk5O1xuICAgIHRoaXMudmlzaWJsZVBvc2l0aW9uID0gMDtcbiAgICB0aGlzLnRhcmdldFBvc2l0aW9uID0gMDtcbiAgICB0aGlzLmxhc3RBbnN3ZXJUaW1lID0gbmV3IERhdGUoKTtcbiAgICB0aGlzLnBvc2l0aW9ucyA9IFtdO1xuXG4gICAgdGhpcy4kZ2FtZSA9IHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoYC5nYW1lYCk7XG4gICAgdGhpcy4kc2xpZGVzQ29udGFpbmVyID0gdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnJlYWN0LXBob25lcy1zbGlkZXMtY29udGFpbmVyYCk7XG4gICAgdGhpcy4kc2xpZGUxID0gdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnJlYWN0LXBob25lcy1zbGlkZS0xYCk7XG4gICAgdGhpcy4kc2xpZGUxdGV4dCA9IHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoYC5yZWFjdC1waG9uZXMtc2xpZGUtMSAucmVhY3QtcGhvbmVzLXNsaWRlLXRleHRgKTtcbiAgICB0aGlzLiRzbGlkZTIgPSB0aGlzLiRzbGlkZUhvbGRlci5maW5kKGAucmVhY3QtcGhvbmVzLXNsaWRlLTJgKTtcbiAgICB0aGlzLiRzbGlkZTJ0ZXh0ID0gdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnJlYWN0LXBob25lcy1zbGlkZS0yIC5yZWFjdC1waG9uZXMtc2xpZGUtdGV4dGApO1xuXG4gICAgdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnRvdWNoYnV0dG9uYCkub24oYHRvdWNoc3RhcnRgLCAkLnByb3h5KHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0LCB0aGlzKSk7XG4gICAgdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnRvdWNoYnV0dG9uYCkub24oYHRvdWNoZW5kYCwgJC5wcm94eSh0aGlzLm9uQnV0dG9uVG91Y2hFbmQsIHRoaXMpKTtcblxuICAgIHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoYC50b3VjaGJ1dHRvbmApLm9uKGBtb3VzZWRvd25gLCAkLnByb3h5KHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0LCB0aGlzKSk7XG4gICAgdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnRvdWNoYnV0dG9uYCkub24oYG1vdXNldXBgLCAkLnByb3h5KHRoaXMub25CdXR0b25Ub3VjaEVuZCwgdGhpcykpO1xuXG4gICAgdGhpcy5yZXNldEdhbWUoKTtcbiAgfVxuXG4gIG9uQnV0dG9uVG91Y2hTdGFydChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICQoZS5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhgZG93bmApO1xuICAgIHRoaXMuc2VsZWN0QW5zd2VyKCQoZS5jdXJyZW50VGFyZ2V0KS50ZXh0KCkpO1xuICB9XG5cbiAgb25CdXR0b25Ub3VjaEVuZChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICQoZS5jdXJyZW50VGFyZ2V0KS5yZW1vdmVDbGFzcyhgZG93bmApO1xuICB9XG5cbiAgc2VsZWN0QW5zd2VyKGFuc3dlcikge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgdGltZSA9IG5vdy5nZXRUaW1lKCkgLSB0aGlzLmxhc3RBbnN3ZXJUaW1lLmdldFRpbWUoKTtcbiAgICB0aGlzLnRvdGFsUmVhY3Rpb25TcGVlZCArPSB0aW1lO1xuICAgIGlmKGFuc3dlci50b0xvd2VyQ2FzZSgpID09PSB0aGlzLnBvc2l0aW9uc1t0aGlzLnRhcmdldFBvc2l0aW9uXS5jb2xvclN0cmluZy50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHQvL2NvcnJlY3QgYW5zd2VyXG4gICAgICB0aGlzLm51bUNvcnJlY3RBbnN3ZXJzKys7XG4gICAgfSBlbHNlIHtcblx0XHRcdC8vcGVuYWx0eSB0aW1lXG4gICAgICB0aGlzLnRvdGFsUmVhY3Rpb25TcGVlZCArPSAxMDAwO1xuICAgIH1cbiAgICB0aGlzLm51bVJlYWN0aW9uU3BlZWRzKys7XG4gICAgdGhpcy5sYXN0QW5zd2VyVGltZSA9IG5vdztcbiAgICB0aGlzLnRhcmdldFBvc2l0aW9uKys7XG4gICAgdGhpcy5maWxsUG9zaXRpb25zV2hlbk5lZWRlZCgpO1xuXHRcdC8vc2VuZCB0byBzZXJ2ZXJcbiAgICB0aGlzLnBvc3RTb2NrZXRNZXNzYWdlKHtcbiAgICAgIHRhcmdldDoge1xuICAgICAgICBjbGllbnQ6IGBwcmVzZW50YXRpb25gLFxuICAgICAgICBzbGlkZTogdGhpcy5uYW1lXG4gICAgICB9LFxuICAgICAgY29udGVudDoge1xuICAgICAgICBhY3Rpb246IENvbnN0YW50cy5VUERBVEVfUkVBQ1RJT05fU1BFRUQsXG4gICAgICAgIHJlYWN0aW9uU3BlZWQ6IHRoaXMudG90YWxSZWFjdGlvblNwZWVkIC8gdGhpcy5udW1Db3JyZWN0QW5zd2Vyc1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2hvd0N1cnJlbnRTdGF0ZSgpIHtcbiAgICB0aGlzLiRzbGlkZUhvbGRlci5maW5kKGAuc3Vic3RhdGVgKS5yZW1vdmVDbGFzcyhgYWN0aXZlYCk7XG4gICAgdGhpcy4kZ2FtZS5jc3Moe1xuICAgICAgJ3otaW5kZXgnOiAtMSxcbiAgICAgIG9wYWNpdHk6IDAuMyxcbiAgICAgICdwb2ludGVyLWV2ZW50cyc6IGBub25lYFxuICAgIH0pO1xuICAgIGlmKHRoaXMuc3Vic3RhdGUgPT09IENvbnN0YW50cy5SRUFDVF9QSE9ORVNfR0FNRSkge1xuICAgICAgdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnN1YnN0YXRlLWdhbWVgKS5hZGRDbGFzcyhgYWN0aXZlYCk7XG4gICAgICB0aGlzLiRnYW1lLmNzcyh7XG4gICAgICAgICd6LWluZGV4JzogMTAsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICdwb2ludGVyLWV2ZW50cyc6IGBhdXRvYFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmKHRoaXMuc3Vic3RhdGUgPT09IENvbnN0YW50cy5SRUFDVF9QSE9ORVNfRklOSVNIRUQpIHtcbiAgICAgIHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoYC5zdWJzdGF0ZS1maW5pc2hlZGApLmFkZENsYXNzKGBhY3RpdmVgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnN1YnN0YXRlLWludHJvYCkuYWRkQ2xhc3MoYGFjdGl2ZWApO1xuICAgIH1cbiAgfVxuXG4gIG9uU3RhdGVDaGFuZ2VkKCkge1xuICAgIGlmKHRoaXMuc3RhdGUgPT09IENvbnN0YW50cy5TVEFURV9BQ1RJVkUpIHtcbiAgICAgIHRoaXMucmVzZXRHYW1lKCk7XG4gICAgfVxuICB9XG5cbiAgcmVzZXRHYW1lKCkge1xuICAgIHRoaXMubGFzdEFuc3dlclRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMudG90YWxSZWFjdGlvblNwZWVkID0gMDtcbiAgICB0aGlzLm51bVJlYWN0aW9uU3BlZWRzID0gMDtcbiAgICB0aGlzLm51bUNvcnJlY3RBbnN3ZXJzID0gMTtcbiAgICB0aGlzLmF2ZXJhZ2VSZWFjdGlvblNwZWVkID0gOTk5OTk5OTtcbiAgICB0aGlzLnZpc2libGVQb3NpdGlvbiA9IDA7XG4gICAgdGhpcy50YXJnZXRQb3NpdGlvbiA9IDA7XG4gICAgdGhpcy5wb3NpdGlvbnMgPSBbXTtcbiAgICB0aGlzLmZpbGxQb3NpdGlvbnNXaGVuTmVlZGVkKCk7XG4gIH1cblxuICBmaWxsUG9zaXRpb25zV2hlbk5lZWRlZCgpIHtcbiAgICBjb25zdCBudW1Qb3NpdGlvbnNUb0FkZCA9IHRoaXMubnVtUmVhY3Rpb25TcGVlZHMgKyAyIC0gdGhpcy5wb3NpdGlvbnMubGVuZ3RoO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBudW1Qb3NpdGlvbnNUb0FkZDsgaSsrKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHtcbiAgICAgICAgY29sb3JTdHJpbmc6IChNYXRoLnJhbmRvbSgpID4gMC41KSA/IGByZWRgIDogYGJsdWVgLFxuICAgICAgICBiZ2NvbG9yOiAoTWF0aC5yYW5kb20oKSA+IDAuNSkgPyBgI2M2MzYzZGAgOiBgIzA2ODRBRmBcbiAgICAgIH07XG4gICAgICBpZihwb3NpdGlvbi5jb2xvclN0cmluZyA9PT0gYHJlZGApIHtcbiAgICAgICAgcG9zaXRpb24uY29sb3IgPSBgI2M2MzYzZGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3NpdGlvbi5jb2xvciA9IGAjMDY4NEFGYDtcbiAgICAgIH1cbiAgICAgIHRoaXMucG9zaXRpb25zLnB1c2gocG9zaXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGRyYXdMb29wKCkge1xuICAgIHRoaXMudmlzaWJsZVBvc2l0aW9uICs9ICh0aGlzLnRhcmdldFBvc2l0aW9uIC0gdGhpcy52aXNpYmxlUG9zaXRpb24pICogMC4xO1xuICAgIGlmKHRoaXMudmlzaWJsZVBvc2l0aW9uICUgMSA+IDAuOTk1KSB7XG4gICAgICB0aGlzLnZpc2libGVQb3NpdGlvbiA9IE1hdGgucm91bmQodGhpcy52aXNpYmxlUG9zaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLiRzbGlkZXNDb250YWluZXIuY3NzKGBsZWZ0YCwgYCR7dGhpcy52aXNpYmxlUG9zaXRpb24gKiAtMTAwICB9JWApO1xuXG4gICAgY29uc3QgZmxvb3JlZFZpc2libGVQb3NpdGlvbiA9IE1hdGguZmxvb3IodGhpcy52aXNpYmxlUG9zaXRpb24pO1xuICAgIGlmKGZsb29yZWRWaXNpYmxlUG9zaXRpb24gJSAyID09PSAwKSB7XG4gICAgICB0aGlzLiRzbGlkZTEuY3NzKHtcbiAgICAgICAgbGVmdDogYCR7Zmxvb3JlZFZpc2libGVQb3NpdGlvbiAqIDEwMCAgfSVgLFxuICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6IHRoaXMucG9zaXRpb25zW2Zsb29yZWRWaXNpYmxlUG9zaXRpb25dLmJnY29sb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kc2xpZGUyLmNzcyh7XG4gICAgICAgIGxlZnQ6IGAke2Zsb29yZWRWaXNpYmxlUG9zaXRpb24gKiAxMDAgKyAxMDAgIH0lYCxcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiB0aGlzLnBvc2l0aW9uc1tmbG9vcmVkVmlzaWJsZVBvc2l0aW9uICsgMV0uYmdjb2xvclxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJHNsaWRlMXRleHQudGV4dCh0aGlzLnBvc2l0aW9uc1tmbG9vcmVkVmlzaWJsZVBvc2l0aW9uXS5jb2xvclN0cmluZyk7XG4gICAgICB0aGlzLiRzbGlkZTJ0ZXh0LnRleHQodGhpcy5wb3NpdGlvbnNbZmxvb3JlZFZpc2libGVQb3NpdGlvbiArIDFdLmNvbG9yU3RyaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kc2xpZGUyLmNzcyh7XG4gICAgICAgIGxlZnQ6IGAke2Zsb29yZWRWaXNpYmxlUG9zaXRpb24gKiAxMDAgIH0lYCxcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiB0aGlzLnBvc2l0aW9uc1tmbG9vcmVkVmlzaWJsZVBvc2l0aW9uXS5iZ2NvbG9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJHNsaWRlMS5jc3Moe1xuICAgICAgICBsZWZ0OiBgJHtmbG9vcmVkVmlzaWJsZVBvc2l0aW9uICogMTAwICsgMTAwICB9JWAsXG4gICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogdGhpcy5wb3NpdGlvbnNbZmxvb3JlZFZpc2libGVQb3NpdGlvbiArIDFdLmJnY29sb3JcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLiRzbGlkZTJ0ZXh0LnRleHQodGhpcy5wb3NpdGlvbnNbZmxvb3JlZFZpc2libGVQb3NpdGlvbl0uY29sb3JTdHJpbmcpO1xuICAgICAgdGhpcy4kc2xpZGUxdGV4dC50ZXh0KHRoaXMucG9zaXRpb25zW2Zsb29yZWRWaXNpYmxlUG9zaXRpb24gKyAxXS5jb2xvclN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgcmVjZWl2ZVNvY2tldE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGlmKCFtZXNzYWdlLmNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYobWVzc2FnZS5jb250ZW50LmFjdGlvbiA9PT0gQ29uc3RhbnRzLlNFVF9TVUJTVEFURSkge1xuICAgICAgdGhpcy5zZXRTdWJzdGF0ZShtZXNzYWdlLmNvbnRlbnQuc3Vic3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIHNldFN1YnN0YXRlKHN1YnN0YXRlKSB7XG4gICAgaWYodGhpcy5zdWJzdGF0ZSAhPT0gc3Vic3RhdGUpIHtcbiAgICAgIHRoaXMuc3Vic3RhdGUgPSBzdWJzdGF0ZTtcbiAgICAgIHRoaXMuc2hvd0N1cnJlbnRTdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG59XG4iLCJpbXBvcnQge0NvbnN0YW50c30gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2pzL0NvbnN0YW50cyc7XG5pbXBvcnQgQ29udGVudEJhc2UgZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2pzL2NsYXNzZXMvQ29udGVudEJhc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFrZVlvdXJQaG9uZXNTbGlkZSBleHRlbmRzIENvbnRlbnRCYXNle1xuXG4gIGNvbnN0cnVjdG9yKCRzbGlkZUhvbGRlcikge1xuICAgIHN1cGVyKCRzbGlkZUhvbGRlcik7XG4gICAgdGhpcy5jdXJyZW50TW90aW9uID0gMDtcbiAgICB0aGlzLm1vdGlvbiA9IDA7XG5cbiAgICB0aGlzLiRzbGlkZUhvbGRlci5maW5kKGAuc2xpZGVgKS5jc3MoYGJhY2tncm91bmQtY29sb3JgLCBgI2M2MzYzZGApO1xuXG4gICAgdGhpcy4kYmFja2dyb3VuZCA9IHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoYC5iYWNrZ3JvdW5kYCk7XG4gICAgdGhpcy4kYmFja2dyb3VuZC5jc3MoYHRvcGAsIGAxMDAlYCk7XG4gICAgdGhpcy4kYmFja2dyb3VuZC5jc3MoYGJhY2tncm91bmQtY29sb3JgLCBgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpYCk7XG5cbiAgICB0aGlzLl9tb3Rpb25VcGRhdGVIYW5kbGVyID0gdGhpcy5tb3Rpb25VcGRhdGVIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBvblN0YXRlQ2hhbmdlZCgpIHtcbiAgICBpZih0aGlzLnN0YXRlID09PSBDb25zdGFudHMuU1RBVEVfQUNUSVZFKSB7XG4gICAgICBpZiAod2luZG93LkRldmljZU1vdGlvbkV2ZW50KSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGBkZXZpY2Vtb3Rpb25gLCB0aGlzLl9tb3Rpb25VcGRhdGVIYW5kbGVyLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRzbGlkZUhvbGRlci5maW5kKGAuYWNjZWxlcmF0aW9uYCkudGV4dChgTm90IHN1cHBvcnRlZCBvbiB5b3VyIGRldmljZSA6LShgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoYGRldmljZW1vdGlvbmAsIHRoaXMuX21vdGlvblVwZGF0ZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIHJlY2VpdmVTb2NrZXRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZighbWVzc2FnZS5jb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmKG1lc3NhZ2UuY29udGVudC5hY3Rpb24gPT09IENvbnN0YW50cy5TRVRfU1VCU1RBVEUpIHtcbiAgICAgIHRoaXMuc2V0U3Vic3RhdGUobWVzc2FnZS5jb250ZW50LnN1YnN0YXRlKTtcbiAgICB9XG4gICAgLy8gaWYobWVzc2FnZS5jb250ZW50LmFjdGlvbiA9PT0gQ29uc3RhbnRzLllPVV9XSU4pIHtcbiAgICAvLyAgIHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoJy5zdWJzdGF0ZS1maW5pc2hlZCBoMScpLnRleHQoJ1lvdXIgVGVhbSBXb24hJyk7XG4gICAgLy8gfVxuICAgIC8vIGlmKG1lc3NhZ2UuY29udGVudC5hY3Rpb24gPT09IENvbnN0YW50cy5ZT1VfTE9TRSkge1xuICAgIC8vICAgdGhpcy4kc2xpZGVIb2xkZXIuZmluZCgnLnN1YnN0YXRlLWZpbmlzaGVkIGgxJykudGV4dCgnWW91ciBUZWFtIExvc3QuLi4nKTtcbiAgICAvLyB9XG4gIH1cblxuICBzZXRTdWJzdGF0ZShzdWJzdGF0ZSkge1xuICAgIGlmKHRoaXMuc3Vic3RhdGUgIT09IHN1YnN0YXRlKSB7XG4gICAgICB0aGlzLnN1YnN0YXRlID0gc3Vic3RhdGU7XG4gICAgICB0aGlzLnNob3dDdXJyZW50U3RhdGUoKTtcbiAgICB9XG4gIH1cblxuICBtb3Rpb25VcGRhdGVIYW5kbGVyKGV2ZW50KSB7XG4gICAgdGhpcy5jdXJyZW50TW90aW9uID0gZXZlbnQuaW50ZXJ2YWwgKiAoTWF0aC5hYnMoZXZlbnQuYWNjZWxlcmF0aW9uLngpICsgTWF0aC5hYnMoZXZlbnQuYWNjZWxlcmF0aW9uLnkpICsgTWF0aC5hYnMoZXZlbnQuYWNjZWxlcmF0aW9uLnopKTtcbiAgfVxuXG4gIGRyYXdMb29wKCkge1xuICAgIHRoaXMubW90aW9uICs9IHRoaXMuY3VycmVudE1vdGlvbjtcbiAgICB0aGlzLm1vdGlvbiAqPSAwLjk3O1xuICAgIHRoaXMuJGJhY2tncm91bmQuY3NzKGB0b3BgLCBgJHsxMDAgLSB0aGlzLm1vdGlvbiAgfSVgKTtcbiAgICBpZih0aGlzLmN1cnJlbnRGcmFtZSAlIDEwID09PSAwKSB7XG4gICAgICB0aGlzLnBvc3RTb2NrZXRNZXNzYWdlKHtcbiAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgY2xpZW50OiBgcHJlc2VudGF0aW9uYCxcbiAgICAgICAgICBzbGlkZTogdGhpcy5uYW1lXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBhY3Rpb246IENvbnN0YW50cy5VUERBVEVfTU9USU9OLFxuICAgICAgICAgIG1vdGlvbjogdGhpcy5tb3Rpb25cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2hvd0N1cnJlbnRTdGF0ZSgpIHtcbiAgICB0aGlzLiRzbGlkZUhvbGRlci5maW5kKGAuc3Vic3RhdGVgKS5yZW1vdmVDbGFzcyhgYWN0aXZlYCk7XG4gICAgaWYodGhpcy5zdWJzdGF0ZSA9PT0gQ29uc3RhbnRzLlNIQUtFX1lPVVJfUEhPTkVTX0dBTUUpIHtcbiAgICAgIHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoYC5zdWJzdGF0ZS1nYW1lYCkuYWRkQ2xhc3MoYGFjdGl2ZWApO1xuICAgIH0gZWxzZSBpZih0aGlzLnN1YnN0YXRlID09PSBDb25zdGFudHMuU0hBS0VfWU9VUl9QSE9ORVNfRklOSVNIRUQpIHtcbiAgICAgIHRoaXMuJHNsaWRlSG9sZGVyLmZpbmQoYC5zdWJzdGF0ZS1maW5pc2hlZGApLmFkZENsYXNzKGBhY3RpdmVgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kc2xpZGVIb2xkZXIuZmluZChgLnN1YnN0YXRlLWludHJvYCkuYWRkQ2xhc3MoYGFjdGl2ZWApO1xuICAgIH1cbiAgfVxuXG59XG4iXX0="}