{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/isomorphic-fetch/fetch-npm-browserify.js","node_modules/whatwg-fetch/fetch.js","src/mobile/js/classes/Presentation.js","src/mobile/js/script.js","src/shared/js/Constants.js","src/shared/js/classes/ContentBase.js","src/shared/js/classes/MobileServerBridge.js","src/shared/js/classes/Presentation.js","src/shared/js/classes/SlideBridge.js","src/mobile/js/classes/react-phones-slide/index.js","src/mobile/js/classes/shake-your-phones-slide/index.js"],"names":[],"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","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","import {Constants} from '../../../shared/js/Constants';\nimport PresentationBase from '../../../shared/js/classes/Presentation';\nimport MobileServerBridge from '../../../shared/js/classes/MobileServerBridge';\n\nexport default class Presentation extends PresentationBase{\n\n  constructor(data, role, settings) {\n    super(data, role, settings);\n    this.$overlay = $(`#overlay`);\n  }\n\n  createMobileServerBridge() {\n    return new MobileServerBridge(this, this.settings);\n  }\n\n  handleMobileServerMessage(message) {\n    if(!message.content) {\n      return;\n    }\n    if(message.content.action === `setCurrentSlideIndex`) {\n      this.setCurrentSlideIndex(message.content.currentSlideIndex);\n    } else if(message.content.action === Constants.BLINK) {\n      this.blink(message.content.text, message.content.backgroundColor);\n    }\n  }\n\n  setCurrentSlideIndex(index) {\n    super.setCurrentSlideIndex(index);\n    if(this.$overlay) {\n      this.$overlay.removeClass(`active`);\n    }\n    if(this.blinkInterval) {\n      clearInterval(this.blinkInterval);\n    }\n  }\n\n  blink(text, backgroundColor) {\n    //overlay important, blinking text\n    this.$overlay.find(`.content`).html(text);\n    this.$overlay.addClass(`active`);\n    if(this.blinkInterval) {\n      clearInterval(this.blinkInterval);\n    }\n    this.blinkInterval = setInterval(this.blinkToggle.bind(this, backgroundColor), 500);\n  }\n\n  blinkToggle(backgroundColor) {\n    this.$overlay.toggleClass(`blink-on`);\n    if(this.$overlay.hasClass(`blink-on`)) {\n      this.$overlay.css(`background-color`, backgroundColor);\n    } else {\n      this.$overlay.css(`background-color`, ``);\n    }\n  }\n\n}\n","import Presentation from './classes/Presentation';\nimport fetch from 'isomorphic-fetch';\n\n(() => {\n\n  const init = () => {\n    const settings = {\n      presentationPath: `/`,\n      mobileServerUrl: ``\n    };\n    //get slides by xmlhttprequest\n    fetch(`/data.json?t=${  Date.now()}`)\n      .then(data => data.json())\n      .then(data => {\n        new Presentation(data, `mobile`, settings);\n      });\n  };\n\n  init();\n})();\n","export const Constants = {\n  GO_TO_PREVIOUS_SLIDE: `goToPreviousSlide`,\n  GO_TO_NEXT_SLIDE: `goToNextSlide`,\n  SET_SLIDES: `setSlides`,\n  SET_CURRENT_SLIDE_INDEX: `setCurrentSlideIndex`,\n\n  MESSAGE: `message`,\n  SOCKET_SEND: `socketSend`,\n  SOCKET_RECEIVE: `socketReceive`,\n  JOIN_SLIDE_ROOM: `joinSlideRoom`,\n  LEAVE_SLIDE_ROOM: `leaveSlideRoom`,\n\n  ROLE_PRESENTATION: `presentation`,\n  ROLE_MOBILE: `mobile`,\n\n  STATE_ACTIVE: `active`,\n  STATE_INACTIVE: `inactive`,\n\n  SET_SUBSTATE: `setSubstate`,\n\n  CHILD_APP_SAVE_CODE: `childAppSaveCode`,\n  CHILD_APP_RUN_CODE: `childAppRunCode`,\n  CHILD_APP_STDOUT_DATA: `childAppStdoutData`,\n  CHILD_APP_STDERR_DATA: `childAppStderrData`,\n\n  OPEN_COMMAND_LINE: `openCommandLine`,\n  OPEN_CAMERA: `openCamera`,\n\n  BLINK: `blink`,\n\n  HEART_RATE_POLAR: `heartRatePolar`,\n\n  SET_TEAM: `setTeam`,\n  UPDATE_MOTION: `updateMotion`,\n\n  YOU_WIN: `youWin`,\n  YOU_LOSE: `youLose`,\n\n  SHAKE_YOUR_PHONES_INTRO: `shakeYourPhonesIntro`,\n  SHAKE_YOUR_PHONES_GAME: `shakeYourPhonesGame`,\n  SHAKE_YOUR_PHONES_FINISHED: `shakeYourPhonesFinished`,\n\n  SHAKE_YOUR_PHONES_CLIENT_ADDED: `shakeYourPhonesClientAdded`,\n  SHAKE_YOUR_PHONES_CLIENT_REMOVED: `shakeYourPhonesClientRemoved`,\n  SHAKE_YOUR_PHONES_CLIENT_LIST: `shakeYourPhonesClientList`,\n  SHAKE_YOUR_PHONES_CLIENT_UPDATE: `shakeYourPhonesClientUpdate`,\n\n  HIGHEST_HEARTRATE_GAME_INTRO: `highestHeartrateGameIntro`,\n  HIGHEST_HEARTRATE_GAME_GAME: `highestHeartrateGameGame`,\n  HIGHEST_HEARTRATE_GAME_FINISHED: `highestHeartrateGameFinished`,\n\n  LOWEST_HEARTRATE_GAME_INTRO: `lowestHeartrateGameIntro`,\n  LOWEST_HEARTRATE_GAME_GAME: `lowestHeartrateGameGame`,\n  LOWEST_HEARTRATE_GAME_FINISHED: `lowestHeartrateGameFinished`,\n\n  UPDATE_REACTION_SPEED: `updateReactionSpeed`,\n\n  REACT_PHONES_INTRO: `reactPhonesIntro`,\n  REACT_PHONES_GAME: `reactPhonesGame`,\n  REACT_PHONES_FINISHED: `reactPhonesFinished`,\n\n  DANCE_PAD_GAME_INTRO: `dancePadGameIntro`,\n  DANCE_PAD_GAME_GAME: `dancePadGameGame`,\n  DANCE_PAD_GAME_FINISHED: `dancePadGameFinished`,\n};\n","import {Constants} from '../Constants';\n\nexport default class ContentBase{\n\n  constructor($slideHolder) {\n    this.$slideHolder = $slideHolder;\n    this.slideHolder = this.$slideHolder[0];\n    this.width = this.slideHolder.offsetWidth;\n    this.height = this.slideHolder.offsetHeight;\n    this.prevWidth = this.width;\n    this.prevHeight = this.height;\n    this.widthChanged = false;\n    this.heightChanged = false;\n    this.sizeChanged = false;\n    this.src = $slideHolder.attr(`data-src`);\n    this.name = $slideHolder.attr(`data-name`);\n    this.settings = {};\n    try {\n      this.settings = JSON.parse($(`#presentation`).attr(`data-presentation-settings`));\n    } catch (e) {\n      console.error(e);\n    }\n    this.fps = 60;\n    this._animationFrameId = false;\n    this._currentTime = 0;\n    this._delta = 0;\n    this._interval = false;\n    this._lastTime = new Date().getTime();\n    this.currentFrame = 0;\n\n    this.startListeningForMessages();\n\n    this.__drawLoop = this._drawLoop.bind(this);\n    this._interval = 1000 / this.fps;\n\n    window.requestAnimationFrame(() => {\n      $slideHolder.trigger(`load`);\n    });\n  }\n\n  startListeningForMessages() {\n    this._slideHolderMessageToSlideHandler = this.slideHolderMessageToSlideHandler.bind(this);\n    this.$slideHolder.on(`message-to-slide`, this._slideHolderMessageToSlideHandler);\n  }\n\n  stopListeningForMessages() {\n    this.$slideHolder.off(`message-to-slide`, this._slideHolderMessageToSlideHandler);\n  }\n\n  slideHolderMessageToSlideHandler(event, message) {\n    this.receiveMessage({data: message});\n  }\n\n  receiveMessage(event) {\n    if(!event.data) {\n      return;\n    }\n    switch(event.data.action) {\n    case `setState`:\n      this.setState(event.data.state);\n      break;\n    case `destroy`:\n      this.destroy();\n      break;\n    case Constants.SOCKET_RECEIVE:\n      this.receiveSocketMessage(event.data.message);\n      break;\n    default:\n      this.handleMessage(event.data);\n      break;\n    }\n  }\n\n  destroy() {\n    this.stopListeningForMessages();\n    window.cancelAnimationFrame(this._animationFrameId);\n  }\n\n  postMessage(data) {\n    this.$slideHolder.trigger(`message-from-slide`, data);\n  }\n\n  handleMessage(data) { // eslint-disable-line no-unused-vars\n  }\n\n  postSocketMessage(message) {\n    this.postMessage({\n      action: Constants.SOCKET_SEND,\n      message: message\n    });\n  }\n\n  receiveSocketMessage(message) { // eslint-disable-line no-unused-vars\n  }\n\n  setState(state) {\n    if(state !== this.state) {\n      this.state = state;\n      this.onStateChanged();\n      if(this.state === Constants.STATE_ACTIVE) {\n        this.currentFrame = 0;\n        this._drawLoop();\n      } else {\n        window.cancelAnimationFrame(this._animationFrameId);\n      }\n    }\n  }\n\n  onStateChanged() {\n  }\n\n  _drawLoop() {\n    this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);\n    this._currentTime = (new Date()).getTime();\n    this._delta = (this._currentTime - this._lastTime);\n    if(this._delta > this._interval) {\n      this.currentFrame++;\n      this.prevWidth = this.width;\n      this.prevHeight = this.height;\n      this.width = this.slideHolder.offsetWidth;\n      this.height = this.slideHolder.offsetHeight;\n      this.widthChanged = (this.width !== this.prevWidth);\n      this.heightChanged = (this.height !== this.prevHeight);\n      this.sizeChanged = (this.widthChanged || this.heightChanged);\n      this.drawLoop(this._delta);\n      this._lastTime = this._currentTime - (this._delta % this._interval);\n    }\n  }\n\n  drawLoop(delta) { // eslint-disable-line no-unused-vars\n  }\n\n}\n","import fetch from 'isomorphic-fetch';\n\nexport default class MobileServerBridge {\n\n  constructor(presentation, settings) {\n    this.presentation = presentation;\n    this.settings = settings;\n    this.connect();\n  }\n\n  connect() {\n    if (!this.settings.mobileServerUrl) {\n      return;\n    }\n    console.log(`MobileServerBridge.connect`);\n    //console.warn('MobileServerBridge disabled');\n    //return;\n    //post to the api\n    fetch(`${this.settings.mobileServerUrl}/login`, {\n      method: `POST`,\n      body: JSON.stringify(this.getLoginCredentials()),\n      headers: new Headers({'Content-Type': `application/json`})\n    })\n    .then(response => response.json())\n    .then(result => this.loginHandler(result))\n    .catch(e => {\n      console.error(e);\n      setTimeout(() => this.connect(), 1000);\n    });\n  }\n\n  getLoginCredentials() {\n    return {\n      email: this.settings.mobileServerUsername,\n      password: this.settings.mobileServerPassword,\n    };\n  }\n\n  loginHandler(result) {\n    this.token = result.token;\n    this.socket = io(this.settings.mobileServerUrl, {\n      query: `token=${  this.token}`,\n      reconnection: false,\n      forceNew: true\n    });\n    this.socket.on(`connect`, this.socketConnectHandler.bind(this));\n    this.socket.on(`disconnect`, this.socketDisconnectHandler.bind(this));\n    this.socket.on(`message`, this.socketMessageHandler.bind(this));\n  }\n\n  socketConnectHandler() {\n    console.log(`MobileServerBridge.socketConnectHandler`);\n    this.presentation.mobileServerBridgeConnected();\n  }\n\n  socketDisconnectHandler() {\n    this.connect();\n  }\n\n  tryToSend() {\n    if(this.socket) {\n      this.socket.emit.apply(this.socket, arguments);\n    }\n  }\n\n  socketMessageHandler(message) {\n    this.presentation.mobileServerMessageHandler(message);\n  }\n}\n","import {Constants} from '../Constants';\nimport SlideBridge from './SlideBridge';\n\nexport default class Presentation {\n  /*\n   * data: json object with slides array property\n   * role: mobile or presentation\n   */\n  constructor(data, role, settings) {\n    this.data = data;\n    this.role = role;\n    this.settings = settings;\n    $(`#presentation`).attr(`data-presentation-settings`, JSON.stringify(settings));\n    this.currentSlideIndex = -1;\n    this.slideHolders = [];\n    this.numSlideHolders = 3;\n    this.slideBridges = [];\n    this.slideBridgesBySlideName = {};\n\n    this.createSlideHolders();\n    this.createSlideBridges(this.data);\n\n    this.mobileServerBridge = this.createMobileServerBridge();\n    this.startListeningForMessages();\n\n    this.setCurrentSlideIndex(0);\n  }\n\n  startListeningForMessages() {\n    window.addEventListener(`message`, this.slideMessageHandler.bind(this), false);\n  }\n\n  createSlideHolders() {\n    for(let i = 0; i < this.numSlideHolders; i++) {\n      const $slideHolder = $(`<div class=\"slide-frame\" />`);\n      this.slideHolders.push($slideHolder);\n      $(`#presentation`).append($slideHolder);\n    }\n  }\n\n  createSlideBridges(data) {\n    const numSlides = data.slides.length;\n    for(let i = 0; i < numSlides; i++) {\n      const slideBridge = this.createSlideBridge(data.slides[i]);\n      this.slideBridges.push(slideBridge);\n      this.slideBridgesBySlideName[slideBridge.name] = slideBridge;\n    }\n  }\n\n  createSlideBridge(slide) {\n    return new SlideBridge(slide);\n  }\n\n  slideMessageHandler(event) {\n    if(!event.data) {\n      return;\n    }\n    switch(event.data.action) {\n    case Constants.SOCKET_SEND:\n      if(this.mobileServerBridge) {\n        this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);\n      }\n      break;\n    }\n  }\n\n  mobileServerBridgeConnected() {\n    //join the rooms of the slideHolders\n    for(let i = 0; i < this.numSlideHolders; i++) {\n      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.slideHolders[i]).attr(`data-name`));\n    }\n  }\n\n  mobileServerMessageHandler(message) {\n    if(message.target.slide) {\n      //slide has to handle the message\n      const slideBridge = this.getSlideBridgeByName(message.target.slide);\n      if(slideBridge) {\n        slideBridge.tryToPostMessage({\n          action: Constants.SOCKET_RECEIVE,\n          message: message\n        });\n      }\n    } else {\n      //presentation has to handle the message\n      this.handleMobileServerMessage(message);\n    }\n  }\n\n  handleMobileServerMessage(message) {\n    console.log(`[shared/Presentation] handleMobileServerMessage`, message);\n  }\n\n  getSlideBridgeByIndex(index) {\n    if(index >= 0 && index < this.slideBridges.length) {\n      return this.slideBridges[index];\n    }\n    return false;\n  }\n\n  getSlideBridgeByName(slideName) {\n    return this.slideBridgesBySlideName[slideName];\n  }\n\n  getSlideHolderForSlide(slide, slidesNotToClear) {\n    if(slide) {\n      let $slideHolder = $(`.slide-frame[data-name=\"${  slide.name  }\"]`);\n      if($slideHolder.length > 0) {\n        return $slideHolder[0];\n      }\n      //get a free slideHolder\n      const slideNamesNotToClear = [];\n      $(slidesNotToClear).each(function(index, obj){\n        slideNamesNotToClear.push(obj.name);\n      });\n      const $slideHolders = $(`.slide-frame`);\n      for (let i = $slideHolders.length - 1; i >= 0; i--) {\n        $slideHolder = $($slideHolders[i]);\n        const name = $slideHolder.attr(`data-name`);\n        if(!name || slideNamesNotToClear.indexOf(name) === -1) {\n          return $slideHolder[0];\n        }\n      }\n    }\n    return false;\n  }\n\n  goToPreviousSlide() {\n    this.setCurrentSlideIndex(this.currentSlideIndex - 1);\n  }\n\n  goToNextSlide() {\n    this.setCurrentSlideIndex(this.currentSlideIndex + 1);\n  }\n\n  setCurrentSlideIndex(value) {\n    value = Math.max(0, Math.min(value, this.slideBridges.length - 1));\n    if(value !== this.currentSlideIndex) {\n      this.currentSlideIndex = value;\n\n      const currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);\n      const previousSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex - 1);\n      const nextSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex + 1);\n\n      //remove \"used\" class from slide holders\n      $(`.slide-frame`).removeAttr(`data-used`, false);\n\n      const currentSlideHolder = this.getSlideHolderForSlide(currentSlideBridge, [previousSlideBridge, nextSlideBridge]);\n      this.setupSlideHolder(currentSlideHolder, currentSlideBridge, Constants.STATE_ACTIVE, 0);\n\n      const previousSlideHolder = this.getSlideHolderForSlide(previousSlideBridge, [currentSlideBridge, nextSlideBridge]);\n      this.setupSlideHolder(previousSlideHolder, previousSlideBridge, Constants.STATE_INACTIVE, `-100%`);\n\n      const nextSlideHolder = this.getSlideHolderForSlide(nextSlideBridge, [previousSlideBridge, currentSlideBridge]);\n      this.setupSlideHolder(nextSlideHolder, nextSlideBridge, Constants.STATE_INACTIVE, `100%`);\n\n      //clear attributes of unused slide frames\n      $(`.slide-frame`).each(function(index, slideHolder){\n        if(!$(slideHolder).attr(`data-used`)) {\n          $(slideHolder).removeAttr(`data-used`).removeAttr(`data-name`).removeAttr(`data-src`);\n        }\n      });\n\n      //all other slideHolder bridges should be unlinked from their slideHolder\n      this.slideBridges.forEach(function(slideBridge){\n        if(slideBridge === currentSlideBridge) {\n          return;\n        }\n        if(slideBridge === previousSlideBridge) {\n          return;\n        }\n        if(slideBridge === nextSlideBridge) {\n          return;\n        }\n        slideBridge.slideHolder = null;\n      });\n\n      bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);\n    }\n  }\n\n  setupSlideHolder(slideHolder, slideBridge, state, left) {\n    if(slideHolder) {\n      let src = `slides/${  slideBridge.name  }.html`;\n      if(slideBridge.data[this.role] && slideBridge.data[this.role].url) {\n        src = slideBridge.data[this.role].url;\n      }\n      src = this.processSlideSrc(src);\n      if(slideBridge.isAlreadyCorrectlyAttached(slideHolder, src)) {\n        //console.log(slideBridge.name + ' already attached');\n      } else {\n        this.attachToSlideHolder(slideHolder, slideBridge, src);\n      }\n      slideBridge.setState(state);\n      $(slideHolder).css(`left`, left);\n      $(slideHolder).attr(`data-used`, 1);\n    }\n  }\n\n  attachToSlideHolder(slideHolder, slideBridge, src) {\n    //listen for events on this slideHolder\n    $(slideHolder).off(`message-from-slide`);\n    $(slideHolder).on(`message-from-slide`, (event, message) =>  {\n      this.slideMessageHandler({data: message});\n    });\n    //leave previous channel of this slideHolder\n    if(this.mobileServerBridge) {\n      this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(slideHolder).attr(`data-name`));\n    }\n    //add the join as a callback for the onload event\n    slideBridge.attachToSlideHolder(slideHolder, src, this.slideLoaded.bind(this, slideHolder, slideBridge, src));\n  }\n\n  slideLoaded(slideHolder, slideBridge) { // eslint-disable-line no-unused-vars\n    //join new channel\n    if(this.mobileServerBridge) {\n      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(slideHolder).attr(`data-name`));\n    }\n  }\n\n  processSlideSrc(src) {\n    return src;\n  }\n\n  createMobileServerBridge() {\n    //to implement in extending classes\n  }\n}\n","import fetch from 'isomorphic-fetch';\n\nexport default class SlideBridge {\n  constructor(data) {\n    this.data = data;\n    this.name = this.data.name;\n  }\n\n  isAlreadyCorrectlyAttached(slideHolder, src) {\n    return (this.slideHolder === slideHolder && $(slideHolder).attr(`data-name`) === this.name && $(slideHolder).attr(`data-src`) === src);\n  }\n\n  attachToSlideHolder(slideHolder, src, cb) {\n    this.slideHolder = slideHolder;\n    //notify the content it is being cleared\n    this.tryToPostMessage({action: `destroy`});\n    //clear the current content\n    this.slideHolder.innerHTML = ``;\n    $(slideHolder).attr(`data-name`, this.name);\n    $(slideHolder).addClass(`loading`);\n\n    $(slideHolder).off(`load`);\n    $(slideHolder).on(`load`, () => {\n      this.tryToPostMessage({\n        action: `setState`,\n        state: this.state\n      });\n      $(slideHolder).off(`load`);\n    });\n\n    if(src !== $(slideHolder).attr(`data-src`)) {\n      //fetch the html\n      fetch(src)\n        .then(result => result.text())\n        .then(result => $(result))\n        .then($result => {\n          $(slideHolder).html($result.html());\n          $(slideHolder).removeClass(`loading`);\n          cb();\n        })\n        .catch(err => {\n          console.error(err);\n          $(slideHolder).removeClass(`loading`);\n          cb();\n        });\n      $(slideHolder).attr(`data-src`, src);\n    }\n  }\n\n  tryToPostMessage(message) {\n    if(!this.slideHolder)\n    {\n      console.log(`${this.name  } post fail`);\n      return;\n    }\n    //trigger with jquery\n    $(this.slideHolder).trigger(`message-to-slide`, message);\n  }\n\n  setState(state) {\n    this.state = state;\n    this.tryToPostMessage({\n      action: `setState`,\n      state: this.state\n    });\n  }\n}\n","import {Constants} from '../../../../shared/js/Constants';\nimport ContentBase from '../../../../shared/js/classes/ContentBase';\n\nexport default class ReactPhonesSlide extends ContentBase{\n\n  constructor($slideHolder) {\n    super($slideHolder);\n\n    this.totalReactionSpeed = 0;\n    this.numReactionSpeeds = 0;\n    this.numCorrectAnswers = 1;\n    this.averageReactionSpeed = 9999999;\n    this.visiblePosition = 0;\n    this.targetPosition = 0;\n    this.lastAnswerTime = new Date();\n    this.positions = [];\n\n    this.$game = this.$slideHolder.find(`.game`);\n    this.$slidesContainer = this.$slideHolder.find(`.react-phones-slides-container`);\n    this.$slide1 = this.$slideHolder.find(`.react-phones-slide-1`);\n    this.$slide1text = this.$slideHolder.find(`.react-phones-slide-1 .react-phones-slide-text`);\n    this.$slide2 = this.$slideHolder.find(`.react-phones-slide-2`);\n    this.$slide2text = this.$slideHolder.find(`.react-phones-slide-2 .react-phones-slide-text`);\n\n    this.$slideHolder.find(`.touchbutton`).on(`touchstart`, $.proxy(this.onButtonTouchStart, this));\n    this.$slideHolder.find(`.touchbutton`).on(`touchend`, $.proxy(this.onButtonTouchEnd, this));\n\n    this.$slideHolder.find(`.touchbutton`).on(`mousedown`, $.proxy(this.onButtonTouchStart, this));\n    this.$slideHolder.find(`.touchbutton`).on(`mouseup`, $.proxy(this.onButtonTouchEnd, this));\n\n    this.resetGame();\n  }\n\n  onButtonTouchStart(e) {\n    e.preventDefault();\n    $(e.currentTarget).addClass(`down`);\n    this.selectAnswer($(e.currentTarget).text());\n  }\n\n  onButtonTouchEnd(e) {\n    e.preventDefault();\n    $(e.currentTarget).removeClass(`down`);\n  }\n\n  selectAnswer(answer) {\n    const now = new Date();\n    const time = now.getTime() - this.lastAnswerTime.getTime();\n    this.totalReactionSpeed += time;\n    if(answer.toLowerCase() === this.positions[this.targetPosition].colorString.toLowerCase()) {\n\t\t\t//correct answer\n      this.numCorrectAnswers++;\n    } else {\n\t\t\t//penalty time\n      this.totalReactionSpeed += 1000;\n    }\n    this.numReactionSpeeds++;\n    this.lastAnswerTime = now;\n    this.targetPosition++;\n    this.fillPositionsWhenNeeded();\n\t\t//send to server\n    this.postSocketMessage({\n      target: {\n        client: `presentation`,\n        slide: this.name\n      },\n      content: {\n        action: Constants.UPDATE_REACTION_SPEED,\n        reactionSpeed: this.totalReactionSpeed / this.numCorrectAnswers\n      }\n    });\n  }\n\n  showCurrentState() {\n    this.$slideHolder.find(`.substate`).removeClass(`active`);\n    this.$game.css({\n      'z-index': -1,\n      opacity: 0.3,\n      'pointer-events': `none`\n    });\n    if(this.substate === Constants.REACT_PHONES_GAME) {\n      this.$slideHolder.find(`.substate-game`).addClass(`active`);\n      this.$game.css({\n        'z-index': 10,\n        opacity: 1,\n        'pointer-events': `auto`\n      });\n    } else if(this.substate === Constants.REACT_PHONES_FINISHED) {\n      this.$slideHolder.find(`.substate-finished`).addClass(`active`);\n    } else {\n      this.$slideHolder.find(`.substate-intro`).addClass(`active`);\n    }\n  }\n\n  onStateChanged() {\n    if(this.state === Constants.STATE_ACTIVE) {\n      this.resetGame();\n    }\n  }\n\n  resetGame() {\n    this.lastAnswerTime = new Date();\n    this.totalReactionSpeed = 0;\n    this.numReactionSpeeds = 0;\n    this.numCorrectAnswers = 1;\n    this.averageReactionSpeed = 9999999;\n    this.visiblePosition = 0;\n    this.targetPosition = 0;\n    this.positions = [];\n    this.fillPositionsWhenNeeded();\n  }\n\n  fillPositionsWhenNeeded() {\n    const numPositionsToAdd = this.numReactionSpeeds + 2 - this.positions.length;\n    for(let i = 0; i < numPositionsToAdd; i++) {\n      const position = {\n        colorString: (Math.random() > 0.5) ? `red` : `blue`,\n        bgcolor: (Math.random() > 0.5) ? `#c6363d` : `#0684AF`\n      };\n      if(position.colorString === `red`) {\n        position.color = `#c6363d`;\n      } else {\n        position.color = `#0684AF`;\n      }\n      this.positions.push(position);\n    }\n  }\n\n  drawLoop() {\n    this.visiblePosition += (this.targetPosition - this.visiblePosition) * 0.1;\n    if(this.visiblePosition % 1 > 0.995) {\n      this.visiblePosition = Math.round(this.visiblePosition);\n    }\n    this.$slidesContainer.css(`left`, `${this.visiblePosition * -100  }%`);\n\n    const flooredVisiblePosition = Math.floor(this.visiblePosition);\n    if(flooredVisiblePosition % 2 === 0) {\n      this.$slide1.css({\n        left: `${flooredVisiblePosition * 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition].bgcolor\n      });\n      this.$slide2.css({\n        left: `${flooredVisiblePosition * 100 + 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition + 1].bgcolor\n      });\n\n      this.$slide1text.text(this.positions[flooredVisiblePosition].colorString);\n      this.$slide2text.text(this.positions[flooredVisiblePosition + 1].colorString);\n    } else {\n      this.$slide2.css({\n        left: `${flooredVisiblePosition * 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition].bgcolor\n      });\n      this.$slide1.css({\n        left: `${flooredVisiblePosition * 100 + 100  }%`,\n        'background-color': this.positions[flooredVisiblePosition + 1].bgcolor\n      });\n\n      this.$slide2text.text(this.positions[flooredVisiblePosition].colorString);\n      this.$slide1text.text(this.positions[flooredVisiblePosition + 1].colorString);\n    }\n  }\n\n  receiveSocketMessage(message) {\n    if(!message.content) {\n      return;\n    }\n    if(message.content.action === Constants.SET_SUBSTATE) {\n      this.setSubstate(message.content.substate);\n    }\n  }\n\n  setSubstate(substate) {\n    if(this.substate !== substate) {\n      this.substate = substate;\n      this.showCurrentState();\n    }\n  }\n\n}\n","import {Constants} from '../../../../shared/js/Constants';\nimport ContentBase from '../../../../shared/js/classes/ContentBase';\n\nexport default class ShakeYourPhonesSlide extends ContentBase{\n\n  constructor($slideHolder) {\n    super($slideHolder);\n    this.currentMotion = 0;\n    this.motion = 0;\n\n    this.$slideHolder.find(`.slide`).css(`background-color`, `#c6363d`);\n\n    this.$background = this.$slideHolder.find(`.background`);\n    this.$background.css(`top`, `100%`);\n    this.$background.css(`background-color`, `rgba(255, 255, 255, 0.5)`);\n\n    this._motionUpdateHandler = this.motionUpdateHandler.bind(this);\n  }\n\n  onStateChanged() {\n    if(this.state === Constants.STATE_ACTIVE) {\n      if (window.DeviceMotionEvent) {\n        window.addEventListener(`devicemotion`, this._motionUpdateHandler, false);\n      } else {\n        this.$slideHolder.find(`.acceleration`).text(`Not supported on your device :-(`);\n      }\n    } else {\n      window.removeEventListener(`devicemotion`, this._motionUpdateHandler);\n    }\n  }\n\n  receiveSocketMessage(message) {\n    if(!message.content) {\n      return;\n    }\n    if(message.content.action === Constants.SET_SUBSTATE) {\n      this.setSubstate(message.content.substate);\n    }\n    // if(message.content.action === Constants.YOU_WIN) {\n    //   this.$slideHolder.find('.substate-finished h1').text('Your Team Won!');\n    // }\n    // if(message.content.action === Constants.YOU_LOSE) {\n    //   this.$slideHolder.find('.substate-finished h1').text('Your Team Lost...');\n    // }\n  }\n\n  setSubstate(substate) {\n    if(this.substate !== substate) {\n      this.substate = substate;\n      this.showCurrentState();\n    }\n  }\n\n  motionUpdateHandler(event) {\n    this.currentMotion = event.interval * (Math.abs(event.acceleration.x) + Math.abs(event.acceleration.y) + Math.abs(event.acceleration.z));\n  }\n\n  drawLoop() {\n    this.motion += this.currentMotion;\n    this.motion *= 0.97;\n    this.$background.css(`top`, `${100 - this.motion  }%`);\n    if(this.currentFrame % 10 === 0) {\n      this.postSocketMessage({\n        target: {\n          client: `presentation`,\n          slide: this.name\n        },\n        content: {\n          action: Constants.UPDATE_MOTION,\n          motion: this.motion\n        }\n      });\n    }\n  }\n\n  showCurrentState() {\n    this.$slideHolder.find(`.substate`).removeClass(`active`);\n    if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {\n      this.$slideHolder.find(`.substate-game`).addClass(`active`);\n    } else if(this.substate === Constants.SHAKE_YOUR_PHONES_FINISHED) {\n      this.$slideHolder.find(`.substate-finished`).addClass(`active`);\n    } else {\n      this.$slideHolder.find(`.substate-intro`).addClass(`active`);\n    }\n  }\n\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}